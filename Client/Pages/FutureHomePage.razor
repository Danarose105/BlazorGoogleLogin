@page "/FutureHomePage"


@inject HttpClient Http
@inject NavigationManager Nav
@using BlazorGoogleLogin.Shared.Models.future.toShow
@using BlazorGoogleLogin.Shared.Models.future.toAdd
@using BlazorGoogleLogin.Shared.Models.future.toEdit
@using BlazorGoogleLogin.Client.Components
@using Microsoft.AspNetCore.Components.Web

@inject IJSRuntime JSRuntime

<div class="megaOuterPage">
    <div class="outerPage">
        <div class="outerProfileAndTitle">
            <div class="outerTop">
                <div class="profileAndStreak" @onclick="goToSProfilePage">

                    <div class="streakBtn">
                        @if (streakStatTitle != null && streakStatTitle != "")
                        {
                            if (streakImgIcon != "")
                            {
                                <img src=@streakImgIcon style="width:87%;" />
                            }
                        }
                    </div>
                    <button class="profilePic">@userIcon</button>

                </div>
            </div>

            <div class="pageTitle">תכנית עסקית לחלומות</div>
        </div>


        <div class="outerProgressBar">

            <div class="outerProgressBody">

                <div class="progressBody">
                    <div style="width: @widthForProgressBar;" class="savingsProgress">


                        <span class="bubbleText">חסכתי @sumSavings ₪</span>
                    </div>

                </div>

                <div class="progressText">

                    <div>סך היעדים:</div>
                    <div><b> @sumGoals  <span class="ShekelSign">₪</span></b></div>
                </div>
            </div>

        </div>


        <div>
            @if (earliestDate.HasValue)
            {
                numberOfMonthesToDivide = (12 - earliestDate.Value.Month) + 1;
               
                @if (numberOfMonthesToDivide > 0)
                {
                    monthlySavings = sumNeededSavingsPerYear / numberOfMonthesToDivide;

                }
                else
                {
                    monthlySavings = 0;
                }
            }

            <div>
                <div class="outerTitleAndI">
                    <span class="seconderyTitle">כדי להגיע ליעדי @CurrentYear, אצטרך לחסוך:</span>



                    <div class="outerIAndBubble">
                        <span @onclick="@(()=>expBubbleToolTip("FutureHomePage"))"><img src="./css/images/q-with-shadow.svg" /></span>
                        @if (openISaving)
                        {
                            <TutorialOverlay elementID="@elementToExp" closeOverlay="closeExpOverlay"></TutorialOverlay>
@*                            <span class="iBubbleText">
                                הסכום מחושב
                                לפי 4% ריבית

                            </span>*@
                        }
                    </div>
                </div>

                <div class="outerCurrentSavings">
                    <div class="outerDatesAndDivider">
                        <div class="outerDateAndAmount">
                            <div>החודש</div>

                            <span><b> <span>@monthlySavings</span> <span class="ShekelSign">₪</span></b></span>
                        </div>

                        <div class="savingDivider"></div>

                        <div class="outerDateAndAmount">
                            <div>בשנת @CurrentYear</div>
                            <span><b><span>@sumNeededSavingsPerYear </span> <span class="ShekelSign">₪</span> </b></span>

                        </div>
                    </div>


                </div>
            </div>
        </div>

        <div>
            <div class="outerYearsTable">
                @for (int i = currentYearIndex; i < currentYearIndex + 5; i++)
                {
                    var year = CurrentYear + i;
                    var goalsThisYear = allGoals.Where(goal => goal.dueYear == year).ToList();
                    int goalsDisplayed = 0; // Initialize the counter for displayed goals each year

                    <div class="outerYearInTable">
                        <b style="padding-bottom: 2vh;">@year</b>

                        <div class="outerYears">
                            <div style="width: 85%;
    display: flex;
    flex-direction: column;
    row-gap: 1.5vh;">
                                @foreach (var goalPerYearToSend in goalsThisYear)
                                {
                                    if (goalsDisplayed < 3)
                                    {
                                        // Only display up to the first three goals
                                        <div style="background-color:@ConvertHexToRGBA(goalPerYearToSend.color, 0.13f); border:1px solid @goalPerYearToSend.color; display: flex; flex-direction: column; row-gap: 1.3vh; word-wrap: break-word;" class="goalInTable" @onclick="()=> openGoalsPerYearPopUp(year)">
                                            @goalPerYearToSend.goalTitle
                                        </div>
                                        goalsDisplayed++;
                                    }
                                }


                                @if (goalsThisYear.Count > 3)
                                {
                                    <div style="background-color:#D6D9F1; display: flex; flex-direction: column; row-gap: 1.3vh; word-wrap: break-word;" class="goalInTable" @onclick="()=>openGoalsPerYearPopUp(year)">
                                        <span>@(goalsThisYear.Count - 3) יעדים נוספים</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>

            <div class="outerBtnAndDots outerTableAndNavigation">
                <button class="galleryArrow @disBtnStyle" @onclick="PreviousYears" disabled="@IsPreviousDisabled"><img src="./css/images/arrow-back.svg" /></button>

                <button class="galleryArrow @disNextBtnStyle" @onclick="NextYears" disabled="@IsNextDisabled"><img src="./css/images/arrow-next.svg" /></button>

            </div>

        </div>



        <div class="outerAddNewGoalBtn">
            <button @onclick="closeAddGoalPopup" class="primery-button">יעד חדש</button>
        </div>

        @if (isAddGoalOverlayClicked)
        {


            <div class="megaOuterLay">
                <div class="outerLay">
                    <div class="BgOverlay"> </div>
                    <div class="addSavingOverlay">

                        <div class="paddingDiv">
                            <div class="outerTitleAndIcon">
                                <button class="closeOverlay" @onclick="closeAddGoalOverlay"><img src="./css/images/close x.svg" /></button>
                                <h3 class="popupTitle">הוספת יעד</h3>
                                <div class="titleAndIconToAdd">
                                    <div class="outerTitleAndCounterToAdd">
                                        <div>
                                            <span><b>שם היעד</b></span>
                                        </div>
                                        <div class="input-containerToAdd">

                                            <input class="catTitleToAdd" type="text" placeholder="שם היעד" maxlength="18" minlength="2" @oninput="titleLengthCounter" @bind="newGoal.goalTitle" />
                                            <div class="counter">
                                                @if (newGoal.goalTitle == null || newGoal.goalTitle == "")
                                                {
                                                    <span>0/18</span>
                                                }
                                                else
                                                {
                                                    if (newGoal.goalTitle.Length < 2 || newGoal.goalTitle.Length > 18)
                                                    {

                                                        <span>@titleInputLength/18</span>
                                                    }
                                                    else
                                                    {
                                                        <span>@titleInputLength/18</span>

                                                    }
                                                }
                                            </div>

                                        </div>
                                    </div>
                                </div>

                                <div class="outerColors">
                                    <div class="colorsContainer">
                                        <div class="colorsRow">
                                            @foreach (var color in new[] { "#F4B367", "#AEA2F9", "#F467AB", "#F47867", "#6775F4", "#8DE4BF" })
                                            {
                                                <div id="@(color)" class="@(selectedClass == color ? "color-selected" : "")">
                                                    <input style="opacity:0;" type="radio" name="categoryColors" value="@color"
                                                   @onclick="() => addColor(color)" />

                                                </div>
                                            }
                                        </div>
                                        <div class="colorsRow">
                                            @foreach (var color in new[] { "#67CAF4", "#FCE884", "#F9D3C2", "#16A78D", "#696969", "#DADADA" })
                                            {
                                                <div id="@(color)" class="@(selectedClass == color ? "color-selected" : "")">
                                                    <input style="opacity:0;" type="radio" name="categoryColors" value="@color"
                                                   @onclick="() => addColor(color)" />

                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>

                                <div class="outerGoalToAdd">
                                    <span><b>שנת היעד</b></span>
                                    <div class="outerGoalYearToAdd">
                                        <div style="width: 80%;
    display: flex;
    flex-direction: column;
    align-items: center;">
                                            <div @onclick="()=>openYearsOptions =! openYearsOptions" class="outerGoalYearsOptions">
                                                <!-- Fixed malformed tag here -->
                                                @if (newGoal.dueYear != null && newGoal.dueYear != 0)
                                                {
                                                    <div class="dropDownTitle">
                                                        @newGoal.dueYear
                                                        <span class="accordionPoly"><img src="./css/images/arrow3.svg" /></span>
                                                    </div>
                                                }
                                                else
                                                {
                                                    newGoal.dueYear = CurrentYear;

                                                    <div class="dropDownTitle" style="color:#727272">
                                                        @newGoal.dueYear
                                                        <span class="accordionPoly"><img src="./css/images/arrow3.svg" /></span>
                                                    </div>
                                                }
                                            </div>
                                            @if (openYearsOptions)
                                            {
                                                <div class="outerMonthDayOptionsToAdd">
                                                    @for (int i = 0; i < 16; i++)
                                                    {
                                                        int currentLoopValue = i;  // Create a temporary variable to capture the loop variable
                                                        <div class="yearOption" @onclick="() => SetYearAndClose(CurrentYear + currentLoopValue)">
                                                            @(CurrentYear + currentLoopValue)
                                                        </div>
                                                        
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>

                                <div class="SavingAmountToAdd">
                                    <span><b>סכום היעד</b></span>
                                    <span class="outerSavingAmount">
                                        <input class="SavingAmount" type="number" @bind="newGoal.budget" />
                                        <span>₪</span>
                                    </span>

                                </div>
                            </div>
                        </div>
                        <div class="outerSaveSaving">
                            <button class="primery-button" @onclick="addNewGoal">שמירה וסיום</button>
                        </div>
                    </div>
                </div>
            </div>

        }
        <div class="outerSavingSection">
            <div class="outerRight">
                <div>
                    <div><b>יש לך חסכונות קיימים?</b></div>
                    <div>
                        סביבת החסכונות מאפשרת
                        מעקב אחר החסכון שלך
                    </div>
                </div>
                <div class="outerToSavingsPage">
                    <button @onclick="goToSavingsPage" class="toSavingsBtn">לסביבת החסכונות</button>
                </div>
            </div>
            <div style=" background-color: #D6D9F1;
    display: flex;border-top-left-radius: 0.375rem;
    border-bottom-left-radius: 0.375rem;">
                <img src="./css/images/piggy.svg" style="width: 7rem;
    padding: 1vh;" />
            </div>


        </div>


        @if (showYearlyGoals)
        {

            <div class="overlay">
                <div class="outerPopUp">
                    <div class="outerFirstRow">
                        <div>
                            <button @onclick="closeYearlyGoalsPopUp" class="backArrow">
                                <img src="./css/images/close x.svg" />
                            </button>
                        </div>
                    </div>
                    <div class="outerDetails">
                        <div class="outerYearToShow">
                            <span class="yearToShow">@goalsYearToShow</span>
                        </div>
                        <div>
                            <button @onclick="()=> isAddGoalOverlayClicked = !isAddGoalOverlayClicked" class="AddNewSaving">
                                <div class="emoji-circle">
                                    🎯
                                </div>
                                <p class="addTitle">יעד חדש</p>
                            </button>
                        </div>
                        <div class="goalsContainer">
                            @if (goalsPerYearList.Count == 0)
                            {
                                <span>לא נמצאו יעדים לשנה זו</span>
                            }
                            else
                            {
                                

                                @foreach (AllUserGoalsToShow goalPerYear in goalsPerYearList)
                                {
                                    @if (goalPerYear.dueYear == goalsYearToShow)
                                    {
                                        <div style="background-color:@ConvertHexToRGBA(goalPerYear.color, 0.13f); border:1px solid @goalPerYear.color;" class="goalInYear" @onclick="()=>showGoalDetails(goalPerYear)">
                                            <div class="outerGoalAndIcon">
                                                <div class="emoji-circle">🎯</div>
                                                <span>@goalPerYear.goalTitle</span>
                                            </div>
                                        </div>
                                    }
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>

        }


        @if (isGoalFullDetails)
        {


            <div class="overlay">
                <div class="outerPopUp">
                    <div class="outerFirstRow">
                        <div>
                            <button @onclick="closeGoalDetailsPopUp" class="backArrow">
                                <img src="./css/images/back-repeated.svg" />
                            </button>
                        </div>
                        <div>
                            <div class="outerDotsAndOptionsTrans">
                                <button class="optionsMenu" @onclick="OpetionsBtnClicked"><img src="./css/images/option menu.svg" /></button>
                                @if (isOpetionsBtnClicked)
                                {
                                    <div id="options">
                                        <OptionsMenuComponent editBtnClicked="@showEditGoal" deleteBtnClicked="@deleteGoalBtnClciked" closeOverlay="closeDeleteOverlay"></OptionsMenuComponent>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="outerDetails">
                        <div class="outerTitle">
                            <div class="outerIconAndTitleToShowDetails">
                                <span class="emoji-circle">
                                    🎯
                                </span>
                                <div style="background-color:@ConvertHexToRGBA(goalDetailsToShow.color, 0.13f); border:1px solid @goalDetailsToShow.color;" class="outerGoalTitle">
                                    <span><b>@goalDetailsToShow.goalTitle</b></span>
                                </div>
                            </div>
                            <div class="lineBetween"></div>
                        </div>

                        <div class="outerSaving">
                            <span><b>שנת היעד</b></span>

                            <span class="outerSavingAmount"><b> @goalDetailsToShow.dueYear</b></span>

                        </div>

                        <div class="outerSaving">
                            <span><b>סכום היעד</b></span>


                            <span class="outerSavingAmount"><b> @goalDetailsToShow.budget ₪</b></span>

                        </div>

                    </div>
                </div>
            </div>
        }


        @if (isEditGoalClicked)
        {

            <div class="overlay">
                <div class="outerPopUp">
                    <div class="outerFirstRow">
                        <div>
                            <button @onclick="closeEditGoalPopup" class="backArrow">
                                <img src="./css/images/back-repeated.svg" />
                            </button>
                        </div>

                    </div>

                    <div class="outerDetails">

                        <div class="popupTitle">עריכת יעד</div>

                        <div class="outerTitleAndCounter">

                            <div class="outerTitle">
                                <div class="outerIconAndTitleToEdit">
                                    <span class="emoji-circle">
                                        🎯
                                    </span>
                                    <div class="outerIconAndTitle">
                                        <div style="background-color:@ConvertHexToRGBA(editedGoal.color, 0.13f); border:1px solid @editedGoal.color;" class="outerGoalTitleToEdit">
                                            <span><b><input class="catTitle" type="text" maxlength="18" minlength="2" @oninput="titleLengthCounter" @bind="@editedGoal.goalTitle" /></b></span>
                                        </div>


                                        <div class="counter">
                                            @if (editedGoal.goalTitle == null || editedGoal.goalTitle == "")
                                            {
                                                <span>0/18</span>
                                            }
                                            else
                                            {
                                                if (editedGoal.goalTitle.Length < 2 || editedGoal.goalTitle.Length > 18)
                                                {

                                                    <span>@titleInputLength/18</span>
                                                }
                                                else
                                                {
                                                    <span>@titleInputLength/18</span>

                                                }
                                            }
                                        </div>

                                    </div>

                                </div>
                            </div>


                        </div>


                        <div class="outerColorsAndBtn">
                            <div class="outerColors">
                                <div class="colorsContainer">
                                    <div class="colorsRow">
                                        @foreach (var color in new[] { "#F4B367", "#AEA2F9", "#F467AB", "#F47867", "#6775F4", "#8DE4BF" })
                                        {
                                            <div id="@(color)" class="@(selectedClass == color ? "color-selected" : "")">
                                                <input style="opacity:0;" type="radio" name="categoryColors" value="@color"
                                               @onclick="() => UpdateColor(color)" />

                                            </div>
                                        }
                                    </div>
                                    <div class="colorsRow">
                                        @foreach (var color in new[] { "#67CAF4", "#FCE884", "#F9D3C2", "#16A78D", "#696969", "#DADADA" })
                                        {
                                            <div id="@(color)" class="@(selectedClass == color ? "color-selected" : "")">
                                                <input style="opacity:0;" type="radio" name="categoryColors" value="@color"
                                               @onclick="() => UpdateColor(color)" />

                                            </div>
                                        }

                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="outerGoal">
                            <span><b>שנת היעד</b></span>

                            <div class="outerGoalYear">
                                <div style="width: 80%;">
                                    <div @onclick="()=>openYearsOptions =! openYearsOptions" class="outerGoalYearsOptions">
                                        @if (editedGoal.dueYear != null && editedGoal.dueYear != 0)
                                        {
                                            <div class="dropDownTitle">
                                                @editedGoal.dueYear
                                                <span class="accordionPoly"><img src="./css/images/arrow3.svg" /></span>
                                            </div>
                                        }
                                        else
                                        {
                                            editedGoal.dueYear = CurrentYear;

                                            <div class="dropDownTitle" style="color:#727272">
                                                @editedGoal.dueYear
                                                <span class="accordionPoly"><img src="./css/images/arrow3.svg" /></span>
                                            </div>
                                        }

                                        @if (openYearsOptions)
                                        {
                                            <div class="outerMonthDayOptions">
                                                @for (int i = 0; i < 16; i++)
                                                {
                                                    int currentLoopValue = i;  // Create a temporary variable to capture the loop variable
                                                    <div @onclick="@(()=>SelectYear(CurrentYear + currentLoopValue))" class="yearOption">
                                                        @(CurrentYear + currentLoopValue)
                                                    </div>
                                                }


                                               
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="outerSaving">
                            <span><b>סכום היעד</b></span>

                            <div class="outerSavingAmount">
                                <input class="savingSum" type="number" @bind="@editedGoal.budget" />
                                <span>₪</span>
                            </div>
                        </div>

                        <div class="divBtn">

                            @if (editedGoal.goalTitle == null || editedGoal.goalTitle == "" || editedGoal.goalTitle.Length > 18 || editedGoal.goalTitle.Length < 2)
                            {
                                <button class="primery-button" style="opacity:0.6" disabled>שמירת שינויים</button>
                                <span>לא ניתן לשמור יעד ללא שם.</span>
                            }
                            else
                            {
                                <button class="primery-button" @onclick="saveUpdatedGoal">שמירת שינויים</button>
                            }

                        </div>

                    </div>
                </div>
            </div>
        }


        @if (deleteBtnClicked)
        {
            isOpetionsBtnClicked = false;
            <GeneralPopUpComponent popupTypeTitle="מחיקת יעד" middleText="@popupBodyText" action="מחיקה" makeAction="deleteGoal" closePopUp="closeDeletePopUp"></GeneralPopUpComponent>
        }

    </div>

</div>


@code {

    [Parameter]
    public int userID { get; set; }

    [CascadingParameter]
    private UserDTO user { get; set; }

    string userIcon = "";
    string streakImgIcon = "";
    string streakStatTitle = "";

    List<AllUserGoalsToShow> allGoals = new List<AllUserGoalsToShow>();
    List<AllUserSavingsToShow> allSavings = new List<AllUserSavingsToShow>();
    List<AllUserGoalsToShow> goalsPerYearList = new List<AllUserGoalsToShow>();
    List<DateTime> dates = new List<DateTime>();

    AllUserGoalsToShow goalDetailsToShow;

    GoalToAdd newGoal = new GoalToAdd();
    GoalToEdit editedGoal = new GoalToEdit();


    int sumGoals = 0;
    int sumSavings = 0;
    int sumNeededSavingsPerYear = 0;
    int numberOfMonthesToDivide = 0;
    int monthlySavings = 0;
    int goalsYearToShow = 0;
    int selectedYear;
    int goalsCounter = 0;
    bool showYearlyGoals = false;
    bool isGoalFullDetails = false;
    bool isAddGoalOverlayClicked = false;
    bool openYearsOptions = false;
    bool isOpetionsBtnClicked = false;
    bool isEditGoalClicked = false;
    bool deleteBtnClicked = false;
    bool openISaving = false;
    bool disBtn = false;
    bool disNextBtn = false;
    private DateTime? earliestDate;
    string selectedClass = "";
    string titleInput = "";
    string popupBodyText = "";
    int titleInputLength = 0;
    int deletedGoalYear = 0;
    double savingsForProgressBar = 0;
    string widthForProgressBar = "";
    string disBtnStyle => disBtn ? "disBtn" : "";
    string disNextBtnStyle => disNextBtn ? "disBtn" : "";

    private int CurrentYear => DateTime.Now.Year;
    private int currentYearIndex = 0; // This will track the starting year index for display


    protected override async Task OnInitializedAsync()
    {

        userID = user.Id;

        await Task.Delay(1); // This is just to simulate an async process.

        //int currentMonthNumber = DateTime.Now.Month; // Gets the current month number
        StateHasChanged();

        var getUserIcon = await Http.GetAsync("api/Present/getUserIcon/" + userID);
        if (getUserIcon.IsSuccessStatusCode)
        {
            string iconCheck = await getUserIcon.Content.ReadAsStringAsync();
            userIcon = iconCheck;
        }
        else
        {
            userIcon = "🌟";
            var errorContent = await getUserIcon.Content.ReadAsStringAsync();
            Console.WriteLine("failed to find icon or update it to default because: " + errorContent);
        }

        await getCurrentStreak();


        var userGoalsRes = await Http.GetAsync("api/Future/userFutureGoalsToShow/" + userID);

        if (userGoalsRes.IsSuccessStatusCode)
        {
            allGoals = userGoalsRes.Content.ReadFromJsonAsync<List<AllUserGoalsToShow>>().Result;
            //getCurrentStreak();

        }
        else
        {
            Console.WriteLine("no goals");

        }

        var userSavingsRes = await Http.GetAsync("api/Future/userFutureSavingsToShow/" + userID);

        if (userSavingsRes.IsSuccessStatusCode)
        {
            allSavings = userSavingsRes.Content.ReadFromJsonAsync<List<AllUserSavingsToShow>>().Result;
            //getCurrentStreak();

        }
        else
        {
            Console.WriteLine("no savings");

        }

        sumSavings = 0;
        sumGoals = 0;
        sumNeededSavingsPerYear = 0;
        foreach (AllUserSavingsToShow saving in allSavings)
        {
            sumSavings += saving.savingsSum;
        }

        foreach (AllUserGoalsToShow goal in allGoals)
        {
            sumGoals += goal.budget;
        }

        foreach (AllUserGoalsToShow goal in allGoals)
        {
            if (goal.dueYear == CurrentYear)
            {
                sumNeededSavingsPerYear += goal.budget;
            }

        }
        earliestDate = FindEarliestDateInCurrentYear(allGoals);


        savingsForProgressBar = 0;
        if (sumGoals > 0)
        {
            savingsForProgressBar = ((double)sumSavings / sumGoals) * 100;

            if (savingsForProgressBar > 100)
            {
                savingsForProgressBar = 100;
            }

            widthForProgressBar = savingsForProgressBar.ToString() + "%";
        }else if (sumGoals==0 && sumSavings==0)
        {
            widthForProgressBar = "0%";
        }
    }



    private DateTime? FindEarliestDateInCurrentYear(List<AllUserGoalsToShow> goals)
    {
        int currentYear = DateTime.Now.Year;
        var datesInCurrentYear = goals
                                 .Select(g => g.inputDate)
                                 .Where(date => date.Year == currentYear)
                                 .ToList();

        if (datesInCurrentYear.Any())
        {
            return datesInCurrentYear.Min();
        }

        return null; // Return null if no dates found in the current year
    }

    void goToSavingsPage()
    {
        Nav.NavigateTo("./UserSavingsPage");
    }

    void openGoalsPerYearPopUp(int goalsYear)
    {
        goalsPerYearList.Clear();
        showYearlyGoals = true;
        goalsYearToShow = goalsYear;
        @foreach (AllUserGoalsToShow goal in allGoals)
        {
            if (goal.dueYear == goalsYear)
            {
                goalsPerYearList.Add(goal);
            }

        }
    }


    void closeYearlyGoalsPopUp()
    {
        showYearlyGoals = false;
        goalsPerYearList.Clear();
    }

    void closeGoalDetailsPopUp()
    {
        isGoalFullDetails = false;

    }

    void showGoalDetails(AllUserGoalsToShow goalFullDetails)
    {
        isOpetionsBtnClicked = false;
        isGoalFullDetails = true;
        goalDetailsToShow = goalFullDetails;
    }

    public async Task addNewGoal()
    {
        if (newGoal.color == "" || newGoal.color == null)
        {
            newGoal.color = "#6775F4";
        }

        var goalToAddRes = await Http.PostAsJsonAsync("api/Future/addGoal/" + userID, newGoal);
        if (goalToAddRes.IsSuccessStatusCode)
        {
            // Use 'await' to asynchronously read the content of the response.
            AllUserGoalsToShow newGoalToAddToList = await goalToAddRes.Content.ReadFromJsonAsync<AllUserGoalsToShow>();

            allGoals.Add(newGoalToAddToList);
            newGoal = new GoalToAdd();
            openGoalsPerYearPopUp(newGoalToAddToList.dueYear);
            await OnInitializedAsync();

        }
        else
        {

            Console.WriteLine("Failed to add new goal");
        }

        isAddGoalOverlayClicked = false;
        selectedClass = "";

        savingsForProgressBar = 0;
        if (sumGoals > 0)
        {
            savingsForProgressBar = ((double)sumSavings / sumGoals) * 100;

            if (savingsForProgressBar > 100)
            {
                savingsForProgressBar = 100;
            }

            widthForProgressBar = savingsForProgressBar.ToString() + "%";
        }
    }

    private void UpdateColor(string color)
    {
        if (selectedClass == color)
        {
            // If the color is already selected, unselect it
            selectedClass = ""; // Reset the selected color
            editedGoal.color = ""; // Assuming you want to clear the selected color
        }
        else
        {
            // Otherwise, update to the new selected color
            editedGoal.color = color;
            selectedClass = color;
        }
    }


    private void addColor(string color)
    {
        if (selectedClass == color)
        {
            // If the color is already selected, unselect it
            selectedClass = ""; // Reset the selected color
            newGoal.color = ""; // Assuming you want to clear the selected color
        }
        else
        {
            // Otherwise, update to the new selected color
            newGoal.color = color;
            selectedClass = color;
        }
    }

    public void OpetionsBtnClicked()
    {
        isOpetionsBtnClicked = !isOpetionsBtnClicked;

    }

    void showEditGoal()
    {
        isEditGoalClicked = true;
        isOpetionsBtnClicked = false;
        selectedClass = goalDetailsToShow.color;

        editedGoal.id = goalDetailsToShow.id;
        editedGoal.goalTitle = goalDetailsToShow.goalTitle;
        editedGoal.dueYear = goalDetailsToShow.dueYear;
        editedGoal.budget = goalDetailsToShow.budget;
        editedGoal.color = goalDetailsToShow.color;

        titleInputLength = editedGoal.goalTitle.Length;

    }

    void deleteGoalBtnClciked()
    {
        deleteBtnClicked = !deleteBtnClicked;
        editedGoal.id = goalDetailsToShow.id;

        popupBodyText = "היעד '" + goalDetailsToShow.goalTitle + "' עומד להמחק";
        isOpetionsBtnClicked = false;

    }

    void closeDeleteOverlay()
    {
        OpetionsBtnClicked();

    }

    private void titleLengthCounter(ChangeEventArgs e)
    {
        titleInput = e.Value.ToString();
        titleInputLength = titleInput.Length;
    }

    public async Task saveUpdatedGoal()
    {

        if (editedGoal.color == "" || editedGoal.color == null)
        {
            editedGoal.color = "#6775F4";
        }

        var updateGoalRes = await Http.PostAsJsonAsync("api/Future/EditGoal/", editedGoal);
        if (updateGoalRes.IsSuccessStatusCode)
        {
            GoalToEdit updatedGoal = await updateGoalRes.Content.ReadFromJsonAsync<GoalToEdit>();
            goalDetailsToShow.color = editedGoal.color;
            goalDetailsToShow.dueYear = editedGoal.dueYear;
            goalDetailsToShow.budget = editedGoal.budget;
            goalDetailsToShow.goalTitle = editedGoal.goalTitle;
            isEditGoalClicked = false;
            isGoalFullDetails = false;
            OpetionsBtnClicked();

            //need to refresh the home page

            Console.WriteLine("goal updated");
            await OnInitializedAsync();

        }
        else
        {
            Console.WriteLine("failed to update goal");
        }

        isEditGoalClicked = false;
        //showYearlyGoals = false;
        selectedClass = "";

        savingsForProgressBar = 0;
        if (sumGoals > 0)
        {
            savingsForProgressBar = ((double)sumSavings / sumGoals) * 100;

            if (savingsForProgressBar > 100)
            {
                savingsForProgressBar = 100;
            }

            widthForProgressBar = savingsForProgressBar.ToString() + "%";
        }
    }


    public async Task deleteGoal()
    {
        //showYearlyGoals = false;
        deleteBtnClicked = false;
        isGoalFullDetails = false;
        userID = user.Id;



        var deleteRes = await Http.DeleteAsync("api/Future/deleteGoal/" + editedGoal.id);

        if (deleteRes.IsSuccessStatusCode)
        {

            await DeleteGoalFromYearlyGoals();

            await OnInitializedAsync();




            //showYearlyGoals = true;
            //StateHasChanged();
            //goalsPerYearList.Clear();
            //openGoalsPerYearPopUAfterDelete(deletedGoalYear);
        }
        else
        {
            Console.WriteLine(" בעיה במחיקת יעד");
        }
    }

    public void closeDeletePopUp()
    {
        deleteBtnClicked = false;
    }


    public void closeAddGoalPopup()
    {
        isAddGoalOverlayClicked = !isAddGoalOverlayClicked;
        selectedClass = "";
    }

    public void closeEditGoalPopup()
    {
        isEditGoalClicked = !isEditGoalClicked;
        selectedClass = "";
    }


    async Task<bool> DeleteGoalFromYearlyGoals()
    {
        // Remove the goal directly in the goalsPerYearList
        bool isRemoved = goalsPerYearList.RemoveAll(goalPerYear => goalPerYear.id == editedGoal.id) > 0;

        // If any goal was removed, update the display of goals
        if (isRemoved)
        {
            await ShowGoalsAfterDelete();
        }

        return true;
    }

    async Task<bool> ShowGoalsAfterDelete()
    {
        // Remove the goal from allGoals
        allGoals.RemoveAll(goalPerYearToSend => goalPerYearToSend.id == editedGoal.id);

        return true;
    }


    private void PreviousYears()
    {
        if (currentYearIndex > 0)
        {
            currentYearIndex -= 5;

            disNextBtn = false;
        }

    }

    private void NextYears()
    {
        if (currentYearIndex + 5 < 16) // Ensure we do not exceed the range you initially set (0-15)
        {
            currentYearIndex += 5;
            disBtn = false;
        }
        else
        {
            disBtn = true;
        }
    }

    private bool IsPreviousDisabled => currentYearIndex == 0;
    private bool IsNextDisabled => currentYearIndex + 5 >= 16;

    private string ConvertHexToRGBA(string hexColor, float opacity)
    {
        if (hexColor.StartsWith("#"))
            hexColor = hexColor.Substring(1);  // Remove the '#' if it exists

        if (hexColor.Length != 6) throw new ArgumentException("Hex color must be 6 characters long");

        var r = Convert.ToInt32(hexColor.Substring(0, 2), 16);
        var g = Convert.ToInt32(hexColor.Substring(2, 2), 16);
        var b = Convert.ToInt32(hexColor.Substring(4, 2), 16);

        return $"rgba({r}, {g}, {b}, {opacity})";
    }


    private async Task getCurrentStreak()
    {
        var getCurrentStatRes = await Http.GetAsync("api/Present/getUserStreakStatus/" + userID);
        if (getCurrentStatRes.IsSuccessStatusCode)
        {
            streakStatTitle = await getCurrentStatRes.Content.ReadAsStringAsync();
            switch (streakStatTitle) //will fill the related streak image route
            {
                case "מטבע ארד":

                    streakImgIcon = "./css/images/bronzeCoin.svg";

                    break;
                case "מטבע כסף":

                    streakImgIcon = "./css/images/silverCoin.svg";

                    break;
                case "מטבע זהב":

                    streakImgIcon = "./css/images/goldCoin.svg";

                    break;
                case "שטר":

                    streakImgIcon = "./css/images/singleCashNote.svg";

                    break;
                case "שטרות":

                    streakImgIcon = "./css/images/cashNotes.svg";

                    break;
                case "גביע":

                    streakImgIcon = "./css/images/goblet.svg";

                    break;
                case "יהלום":

                    streakImgIcon = "./css/images/diamond.svg";

                    break;
                default:
                    Console.WriteLine("no picture is associated with this streak");
                    streakImgIcon = "";

                    break;
            }
        }
    }

    public void goToSProfilePage()
    {
        Nav.NavigateTo("./ProfilePage/" + userID);
    }

    private void SelectYear(int year)
    {
        editedGoal.dueYear = year;
        openYearsOptions = true;
        StateHasChanged(); // Force the component to re-render
    }

    void closeAddGoalOverlay()
    {
        isAddGoalOverlayClicked = false;
        selectedClass = "";
    }

    private void SetYearAndClose(int year)
    {
        newGoal.dueYear = year;
        openYearsOptions = false;
    }

    string elementToExp = "";
    public void expBubbleToolTip(string elementName)
    {
        openISaving = !openISaving;
        if (openISaving)
        {
            elementToExp = elementName;
        }
    }

    public void closeExpOverlay()
    {
        openISaving = false;
    }
}