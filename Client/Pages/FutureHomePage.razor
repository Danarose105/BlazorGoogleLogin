@page "/FutureHomePage"


@inject HttpClient Http
@inject NavigationManager Nav
@using BlazorGoogleLogin.Shared.Models.future.toShow
@using BlazorGoogleLogin.Shared.Models.future.toAdd
@using BlazorGoogleLogin.Shared.Models.future.toEdit
@using BlazorGoogleLogin.Client.Components
@using Microsoft.AspNetCore.Components.Web
@*@inject DateService DateService*@
@inject IJSRuntime JSRuntime

<div>תכנית עסקית לחלומות</div>

<div>

    <span>@sumSavings</span>
    <span>/</span>
    <span>@sumGoals</span>


</div>


<div>
    @if (earliestDate.HasValue)
    {
        numberOfMonthesToDivide = (12 - earliestDate.Value.Month) + 1;
        @*<div>The earliest date in the current year is @earliestDate.Value.ToShortDateString().</div>*@
        @if (numberOfMonthesToDivide > 0)
        {
            monthlySavings = sumNeededSavingsPerYear / numberOfMonthesToDivide;

        }
        else
        {
            monthlySavings = 0;
        }
        <div>
            <span>כדי להגיע ליעדי @CurrentYear, אצטרך לחסוך:</span>
            <div>בחודש</div>
            <span>@monthlySavings</span>
            <div>בשנה</div>
            <span>@sumNeededSavingsPerYear </span>
        </div>

    }
</div>

<div>

    @for (int i = 0; i < 16; i++)
    {
        <div>
            @(CurrentYear + i)

            <div>
                @foreach (AllUserGoalsToShow goalPerYearToSend in allGoals)
                {
                    if (goalPerYearToSend.dueYear == CurrentYear + i)
                    {
                        <div style="background-color:@goalPerYearToSend.color" @onclick="()=> openGoalsPerYearPopUp(goalPerYearToSend.dueYear)">
                            @goalPerYearToSend.goalTitle
                        </div>
                    }

                }
            </div>
        </div>
    }
</div>

<div>
    <button @onclick="closeAddGoalPopup">יעד חדש</button>
</div>

@if (isAddGoalOverlayClicked)
{
    <div>
        <div>הוספת יעד</div>
        <div>
            <span>שם היעד</span>
            <input type="text" @bind="newGoal.goalTitle" />
        </div>
        <div>
            <div class="outerColors">
                <div class="colorsContainer">
                    <div class="colorsRow">
                        @foreach (var color in new[] { "#F4B367", "#AEA2F9", "#F467AB", "#F47867", "#6775F4", "#8DE4BF" })
                        {
                            <div id="@(color)" class="@(selectedClass == color ? "color-selected" : "")">
                                <input style="opacity:0;" type="radio" name="categoryColors" value="@color"
                               @onclick="() => addColor(color)" />

                            </div>
                        }
                    </div>
                    <div class="colorsRow">
                        @foreach (var color in new[] { "#67CAF4", "#FCE884", "#F9D3C2", "#16A78D", "#696969", "#DADADA" })
                        {
                            <div id="@(color)" class="@(selectedClass == color ? "color-selected" : "")">
                                <input style="opacity:0;" type="radio" name="categoryColors" value="@color"
                               @onclick="() => addColor(color)" />

                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div>
            <span>שנת היעד</span>
            <div>
                <div @onclick="()=>openYearsOptions =! openYearsOptions">
                    <!-- Fixed malformed tag here -->
                    @if (newGoal.dueYear != null && newGoal.dueYear != 0)
                    {
                        <div class="dropDownTitle">
                            @newGoal.dueYear
                            <span class="accordionPoly"><img src="./css/images/arrow3.svg" /></span>
                        </div>
                    }
                    else
                    {
                        newGoal.dueYear = CurrentYear;

                        <div class="dropDownTitle" style="color:#727272">
                            @newGoal.dueYear
                            <span class="accordionPoly"><img src="./css/images/arrow3.svg" /></span>
                        </div>
                    }
                </div>
                @if (openYearsOptions)
                {
                    <div class="outerMonthDayOptions">
                        @for (int i = 0; i < 16; i++)
                        {
                            int currentLoopValue = i;  // Create a temporary variable to capture the loop variable
                            <div @onclick="@(()=>newGoal.dueYear = (CurrentYear + currentLoopValue))">
                                @(CurrentYear + currentLoopValue)
                            </div>
                            <div class="daydivider"></div>
                        }
                    </div>
                }
            </div>
        </div>
        <div>
            <span>סכום היעד</span>
            <input type="number" @bind="newGoal.budget" />
        </div>

        <div>
            <button @onclick="addNewGoal">שמירה וסיום</button>
        </div>
    </div>

}

<div>
    <button @onclick="goToSavingsPage">לסביבת החסכונות</button>
</div>

@if (showYearlyGoals)
{
    <div>
        <button @onclick="closeYearlyGoalsPopUp">X</button>
    </div>

    <div>
        @goalsYearToShow
    </div>
    <div>
        @if (goalsPerYearList.Count == 0)
        {
            <span>לא נמצאו יעדים לשנה זו</span>
        }
        else
        {
            @foreach (AllUserGoalsToShow goalPerYear in goalsPerYearList)
            {
                @if (goalPerYear.dueYear == goalsYearToShow)
                {
                    <div style="background-color:@goalPerYear.color" @onclick="()=>showGoalDetails(goalPerYear)">
                        @goalPerYear.goalTitle
                    </div>
                }

            }
        }


    </div>
    <div>
        <button @onclick="()=> isAddGoalOverlayClicked = !isAddGoalOverlayClicked">יעד חדש</button>
    </div>


}


@if (isGoalFullDetails)
{

    <div>
        <button @onclick="closeGoalDetailsPopUp"><img src="../css/images/back-repeated.svg" /></button>
    </div>

    <div>
        <div class="closedAndOpenMenu">
            <button class="options" @onclick="OpetionsBtnClicked"><img src="./css/images/option menu.svg" /></button>
            @if (isOpetionsBtnClicked)
            {

                <OptionsMenuComponent editBtnClicked="@showEditGoal" deleteBtnClicked="@deleteGoaltnClciked" closeOverlay="closeDeleteOverlay"></OptionsMenuComponent>
            }
        </div>
    </div>

    <div style="background-color:@goalDetailsToShow.color">
        <span>@goalDetailsToShow.goalTitle</span>
        <span>@goalDetailsToShow.dueYear</span>
        <span>@goalDetailsToShow.budget</span>

    </div>

}


@if (isEditGoalClicked)
{
    <div class="megaOuterLay">
        <div class="outerLay">
            <div class="BgOverlay"> </div>
            <div class="overlay">

                <div class="paddingDiv">
                    <div class="outerTitleAndIcon">
                        <button class="closeOverlay" @onclick="closeEditGoalPopup"><img src="./css/images/close x.svg" /></button>
                        <h3 class="popupTitle">עריכת חסכון</h3>
                        <div class="titleAndIcon">
                            <div class="outerTitleAndCounter">
                                <div class="input-container">
                                    <input class="catTitle" type="text" maxlength="18" minlength="2" @oninput="titleLengthCounter" @bind="@editedGoal.goalTitle" />
                                    <div class="counter">
                                        @if (editedGoal.goalTitle == null || editedGoal.goalTitle == "")
                                        {
                                            <span>0/18</span>
                                        }
                                        else
                                        {
                                            if (editedGoal.goalTitle.Length < 2 || editedGoal.goalTitle.Length > 18)
                                            {

                                                <span>@titleInputLength/18</span>
                                            }
                                            else
                                            {
                                                <span>@titleInputLength/18</span>

                                            }
                                        }
                                    </div>


                                    <div class="outerColorsAndBtn">
                                        <div class="outerColors">
                                            <div class="colorsContainer">
                                                <div class="colorsRow">
                                                    @foreach (var color in new[] { "#F4B367", "#AEA2F9", "#F467AB", "#F47867", "#6775F4", "#8DE4BF" })
                                                    {
                                                        <div id="@(color)" class="@(selectedClass == color ? "color-selected" : "")">
                                                            <input style="opacity:0;" type="radio" name="categoryColors" value="@color"
                                                           @onclick="() => UpdateColor(color)" />

                                                        </div>
                                                    }
                                                </div>
                                                <div class="colorsRow">
                                                    @foreach (var color in new[] { "#67CAF4", "#FCE884", "#F9D3C2", "#16A78D", "#696969", "#DADADA" })
                                                    {
                                                        <div id="@(color)" class="@(selectedClass == color ? "color-selected" : "")">
                                                            <input style="opacity:0;" type="radio" name="categoryColors" value="@color"
                                                           @onclick="() => UpdateColor(color)" />

                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div>
                                <input class="savingSum" type="text" @bind="@editedGoal.dueYear" />
                            </div>

                            <div>
                                <input class="savingSum" type="number" @bind="@editedGoal.budget" />
                            </div>

                            <div class="divBtn">

                                @if (editedGoal.goalTitle == null || editedGoal.goalTitle == "" || editedGoal.goalTitle.Length > 18 || editedGoal.goalTitle.Length < 2)
                                {
                                    <button class="saveBtn" style="opacity:0.6" disabled>שמירת שינויים</button>
                                    <span>לא ניתן לשמור יעד ללא שם.</span>
                                }
                                else
                                {
                                    <button class="saveBtn" @onclick="saveUpdatedGoal">שמירת שינויים</button>
                                }

                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>

}


@if (deleteBtnClicked)
{
    isOpetionsBtnClicked = false;
    <GeneralPopUpComponent popupTypeTitle="מחיקת חסכון" middleText="@popupBodyText" action="מחיקה" makeAction="deleteSaving" closePopUp="closeDeletePopUp"></GeneralPopUpComponent>
}






@code {

    [Parameter]
    public int userID { get; set; }

    [CascadingParameter]
    private UserDTO user { get; set; }


    List<AllUserGoalsToShow> allGoals = new List<AllUserGoalsToShow>();
    List<AllUserSavingsToShow> allSavings = new List<AllUserSavingsToShow>();
    List<AllUserGoalsToShow> goalsPerYearList = new List<AllUserGoalsToShow>();
    List<DateTime> dates = new List<DateTime>();

    AllUserGoalsToShow goalDetailsToShow;

    GoalToAdd newGoal = new GoalToAdd();
    GoalToEdit editedGoal = new GoalToEdit();


    int sumGoals = 0;
    int sumSavings = 0;
    int sumNeededSavingsPerYear = 0;
    int numberOfMonthesToDivide = 0;
    int monthlySavings = 0;
    int goalsYearToShow = 0;
    int selectedYear;
    bool showYearlyGoals = false;
    bool isGoalFullDetails = false;
    bool isAddGoalOverlayClicked = false;
    bool openYearsOptions = false;
    bool isOpetionsBtnClicked = false;
    bool isEditGoalClicked = false;
    bool deleteBtnClicked = false;
    private DateTime? earliestDate;
    string selectedClass = "";
    string titleInput = "";
    string popupBodyText = "";
    int titleInputLength = 0;

    private int CurrentYear => DateTime.Now.Year;

    protected override async Task OnInitializedAsync()
    {

        userID = user.Id;

        await Task.Delay(1); // This is just to simulate an async process.

        //int currentMonthNumber = DateTime.Now.Month; // Gets the current month number
        StateHasChanged();


        var userGoalsRes = await Http.GetAsync("api/Future/userFutureGoalsToShow/" + userID);

        if (userGoalsRes.IsSuccessStatusCode)
        {
            allGoals = userGoalsRes.Content.ReadFromJsonAsync<List<AllUserGoalsToShow>>().Result;
            //getCurrentStreak();

        }
        else
        {
            Console.WriteLine("no goals");

        }

        var userSavingsRes = await Http.GetAsync("api/Future/userFutureSavingsToShow/" + userID);

        if (userSavingsRes.IsSuccessStatusCode)
        {
            allSavings = userSavingsRes.Content.ReadFromJsonAsync<List<AllUserSavingsToShow>>().Result;
            //getCurrentStreak();

        }
        else
        {
            Console.WriteLine("no savings");

        }

        foreach (AllUserSavingsToShow saving in allSavings)
        {
            sumSavings += saving.savingsSum;
        }

        foreach (AllUserGoalsToShow goal in allGoals)
        {
            sumGoals += goal.budget;
        }

        foreach (AllUserGoalsToShow goal in allGoals)
        {
            if (goal.dueYear == CurrentYear)
            {
                sumNeededSavingsPerYear += goal.budget;
            }

        }
        earliestDate = FindEarliestDateInCurrentYear(allGoals);
    }



    private DateTime? FindEarliestDateInCurrentYear(List<AllUserGoalsToShow> goals)
    {
        int currentYear = DateTime.Now.Year;
        var datesInCurrentYear = goals
                                 .Select(g => g.inputDate)
                                 .Where(date => date.Year == currentYear)
                                 .ToList();

        if (datesInCurrentYear.Any())
        {
            return datesInCurrentYear.Min();
        }

        return null; // Return null if no dates found in the current year
    }

    void goToSavingsPage()
    {
        Nav.NavigateTo("./UserSavingsPage");
    }

    void openGoalsPerYearPopUp(int goalsYear)
    {
        showYearlyGoals = true;
        goalsYearToShow = goalsYear;
        @foreach (AllUserGoalsToShow goal in allGoals)
        {
            if (goal.dueYear == goalsYear)
            {
                goalsPerYearList.Add(goal);
            }

        }
    }

    void closeYearlyGoalsPopUp()
    {
        showYearlyGoals = false;
        goalsPerYearList.Clear();
    }

    void closeGoalDetailsPopUp()
    {
        isGoalFullDetails = false;

    }

    void showGoalDetails(AllUserGoalsToShow goalFullDetails)
    {
        isGoalFullDetails = true;
        goalDetailsToShow = goalFullDetails;
    }

    public async Task addNewGoal()
    {
        if (newGoal.color == "" || newGoal.color == null)
        {
            newGoal.color = "#6775F4";
        }

        var goalToAddRes = await Http.PostAsJsonAsync("api/Future/addGoal/" + userID, newGoal);
        if (goalToAddRes.IsSuccessStatusCode)
        {
            // Use 'await' to asynchronously read the content of the response.
            AllUserGoalsToShow newGoalToAddToList = await goalToAddRes.Content.ReadFromJsonAsync<AllUserGoalsToShow>();

            allGoals.Add(newGoalToAddToList);
            newGoal = new GoalToAdd();
            await OnInitializedAsync();
           
        }
        else
        {

            Console.WriteLine("Failed to add new goal");
        }

        isAddGoalOverlayClicked = false;
        selectedClass = "";
    }

    private void UpdateColor(string color)
    {
        if (selectedClass == color)
        {
            // If the color is already selected, unselect it
            selectedClass = ""; // Reset the selected color
            editedGoal.color = ""; // Assuming you want to clear the selected color
        }
        else
        {
            // Otherwise, update to the new selected color
            editedGoal.color = color;
            selectedClass = color;
        }
    }


    private void addColor(string color)
    {
        if (selectedClass == color)
        {
            // If the color is already selected, unselect it
            selectedClass = ""; // Reset the selected color
            newGoal.color = ""; // Assuming you want to clear the selected color
        }
        else
        {
            // Otherwise, update to the new selected color
            newGoal.color = color;
            selectedClass = color;
        }
    }

    public void OpetionsBtnClicked()
    {
        isOpetionsBtnClicked = !isOpetionsBtnClicked;

    }

    void showEditGoal()
    {
        isEditGoalClicked = true;
        selectedClass = goalDetailsToShow.color;

        editedGoal.id = goalDetailsToShow.id;
        editedGoal.goalTitle = goalDetailsToShow.goalTitle;
        editedGoal.dueYear = goalDetailsToShow.dueYear;
        editedGoal.budget = goalDetailsToShow.budget;
        editedGoal.color = goalDetailsToShow.color;

        titleInputLength = editedGoal.goalTitle.Length;

    }

    void deleteGoaltnClciked()
    {
        deleteBtnClicked = !deleteBtnClicked;
        editedGoal.id = goalDetailsToShow.id;

        popupBodyText = "היעד '" + goalDetailsToShow.goalTitle + "' עומד להמחק";
        isOpetionsBtnClicked = false;

    }

    void closeDeleteOverlay()
    {
        OpetionsBtnClicked();

    }

    private void titleLengthCounter(ChangeEventArgs e)
    {
        titleInput = e.Value.ToString();
        titleInputLength = titleInput.Length;
    }

    public async Task saveUpdatedGoal()
    {

        if (editedGoal.color == "" || editedGoal.color == null)
        {
            editedGoal.color = "#6775F4";
        }

        var updateGoalRes = await Http.PostAsJsonAsync("api/Future/EditGoal/", editedGoal);
        if (updateGoalRes.IsSuccessStatusCode)
        {
            GoalToEdit updatedGoal = await updateGoalRes.Content.ReadFromJsonAsync<GoalToEdit>();
            goalDetailsToShow.color = editedGoal.color;
            goalDetailsToShow.dueYear = editedGoal.dueYear;
            goalDetailsToShow.budget = editedGoal.budget;
            goalDetailsToShow.goalTitle = editedGoal.goalTitle;
            isEditGoalClicked = false;
            isGoalFullDetails = false;
            OpetionsBtnClicked();

            //need to refresh the home page

            Console.WriteLine("goal updated");
           await OnInitializedAsync();

        }
        else
        {
            Console.WriteLine("failed to update goal");
        }

        selectedClass = "";
    }


    public async Task deleteSaving()
    {
        //deleteBtnClicked = false;
        //OpenSavingDetails = false;

        //var deleteRes = await Http.DeleteAsync("api/Future/deleteSaving/" + editedSaving.id);

        //if (deleteRes.IsSuccessStatusCode)
        //{
        //    @foreach (AllUserSavingsToShow saving in allSavings)
        //    {
        //        @if(saving.id == editedSaving.id)
        //        {
        //            allSavings.Remove(saving);
        //        }
        //    }
        //}
        //else
        //{
        //    Console.WriteLine(" בעיה במחיקת חסכון");
        //}
    }

    public void closeDeletePopUp()
    {
        deleteBtnClicked = false;
    }


    public void closeAddGoalPopup()
    {
        isAddGoalOverlayClicked = !isAddGoalOverlayClicked;
        selectedClass = "";
    }

       public void closeEditGoalPopup()
    {
        isEditGoalClicked = !isEditGoalClicked;
        selectedClass = "";
    }


}
