@page "/HomePage"

@inject HttpClient Http
@inject NavigationManager Nav
@using BlazorGoogleLogin.Shared.Models.present.toShow
@using BlazorGoogleLogin.Shared.Models.present.toAdd
@using BlazorGoogleLogin.Shared.Models.present.toEdit
@using BlazorGoogleLogin.Client.Components
@using Microsoft.AspNetCore.Components.Web
@inject DateService DateService
@inject IJSRuntime JSRuntime
@*@using PSC.Blazor.Components.Tours*@


<div id="lottieAnimation" style="display:">
    <lottie-player src="https://lottie.host/embed/5154f28c-27b5-434b-b7bf-e5226737de82/wsrkhAfMxt.json" background="transparent" speed="1" loop autoplay></lottie-player>
</div>


@if (openAddCatOverlay)
{
    isOverlay = true;
    BgOverlay = "BgOverlay";
    <EditCategoryComponent popupTitle="הוספת קטגוריה" userID="@userID" newCategory="newCategory" isCategoryOverlayOpen="openCategoryOverlay" addNewCatToIndex="AddNewCat" closeOverlay="openCategoryOverlay"></EditCategoryComponent>
}
else
{
    isOverlay = false;
    if (!isEditOverlay)
    {
        BgOverlay = "";
    }
}

@if (tutorialActive)
{
    isDisabled = true;
    <div id="tutorialBg" class="tutorialOverlay">
        <div class="firstIntroduction">
            <div style="font-weight: 600;">אז איך מתמצאים פה?</div>
            <div>
                <span>לאורך השימוש, לחיצה על אייקון סימן השאלה תציג הסברים קצרים.</span>

            </div>
            <div style="text-align: center; margin-top: 16vh;">
                <img src="./css/images/q-with-bg.svg" style="height:10vh" />
            </div>
            <div style="text-align: center; margin-top: 25vh;">
                @* לחבר לפונקציה שמעדכנת את הDB וסוגרת את האוברליי*@
                <button class="primery-button" @onclick="PassOnboarding">בואו נתחיל!</button>
            </div>
        </div>
    </div>
}
else
{
    isDisabled = false;
}

@if (streakOverlay) //not the final microcopy for this popup
{
    <div class="overlay">
        <div class="outerStory">
            <div class="wellDonePopUp">
                <div class="closePopUpBtn">
                    <button class="modal-close-btn" @onclick="()=>streakOverlay=false"><img src="./css/images/close x.svg" /></button>
                </div>
                <div id="streakExpAndTitle">
                    <div id="streakExpBtn">
                        <span id="qMarkSpan" @onclick="@(()=>expBubbleToolTip("streakPopUp"))"><img src="./css/images/q-with-shadow.svg" /></span>
                        @if (streakExpBubble)
                        {
                            <TutorialOverlay elementID="@elementToExp" closeOverlay="closeExpOverlay"></TutorialOverlay>
                        }
                    </div>
                    <div class="mainTitle">כל הכבוד על ההתמדה!</div>
                </div>
                <div class="weeklyTransAmount">הזנת השבוע @weeklyTransAmount הוצאות,</div>
                <div class="mainTitle">שאפו!</div>
                <div class="outerInfoText">
                    <div>זה השבוע ה-@currentStreak ברציפות. וזו הדרך הנכונה!</div>
                    <div class="statusText">
                        @if (nextStreakStatIn < 35)
                        {
                            <div>הזנה של לפחות 3 הזנות בשבוע</div>
                            <div>
                                <span>למשך</span>
                                <span><b>@nextStreakStatIn השבועות הבאים</b></span>
                            </div>
                            <div>תוביל לסטטוס הבא!</div>
                        }
                        else if (nextStreakStatIn >= 35)
                        {
                            <p><b>הגעת לדרגה הגבוהה ביותר! אליפות!</b></p>
                        }
                    </div>

                </div>
                <div>
                    <img src="@streakImgSrc" />
                </div>
            </div>
        </div>
    </div>
}

<div class="outerWrap" disabled="@isDisabled">
    <div class="@BgOverlay"></div>
    @if (currentUser != null)
    {
        <div id="introPresent">
            <div id="topSectionDiv">
                <div class="outerTopSection">

                    <div class="profileAndStreak" @onclick="goToSProfilePage">

                        @if (streakStatTitle != null && streakStatTitle != "")
                        {
                            @if (streakImgIcon != "")
                            {
                                <span class="streakBtn"><img src=@streakImgIcon style="width:87%;" /></span>

                            }
                        }
                        <button class="profilePic">@currentUser.profilePicOrIcon</button>
                    </div>
                    <div id="topText">
                        <p id="firstTitle">היי @currentUser.firstName 👋🏼</p>

                        <p id="secondTitle">מבט על חודש @currentMonth </p>

                    </div>
                </div>

                <div class="searchWrapper">
                    <div class="search__container">
                        <img src="./css/images/search btn.svg" @onclick="SearchAfterClick" />
                        <input class="searchInput" type="text" value="@searchQuery" @oninput="UpdateSearchQuery" @onkeyup="HandleKeyUp" placeholder="חפשו קטגוריה ..." />

                    </div>
                </div>
            </div>

            <div class="statusContainer">
                <table class="table">
                    <thead>
                        <tr>
                            <th>הוצאתי</th>
                            <th id="middleTableCoulmn">הכנסתי</th>
                            <th>ניצלתי</th>

                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>@Math.Round(currentUser.spendingValueFullList,2) ₪</td>
                            <td id="middleTableRow">@Math.Round(currentUser.incomeValueFullList,2) ₪</td>
                            <td id="leftTableRow">
                                @if (currentUser.spendingValueFullList <= 0 && currentUser.budgetFullValue > 0)
                                {
                                    <span>0</span>
                                }
                                else
                                {
                                    <span> @Math.Round(currentUser.budgetFullValue,2)%</span>
                                }

                                <br />
                                <span id="fromBudget">מהתקציב</span>
                            </td>

                        </tr>
                    </tbody>
                </table>

                <button class="primery-button" @onclick="getSubCatTotalsForStory">מצב החודש כרגע</button>




                @if (storyPopUpWindow)
                {
                    <div class="overlay">
                        <div class="outerStory">
                            <div class="storyWindow">

                                <div class="outerPhaseAndClose">

                                    <span class="modal-close-btn" @onclick="StoryWindowControl"><img src="./css/images/close x.svg" /></span>

                                    <div class="outerStoryPhase">
                                        <div class="progress-nav-bar">

                                            <button class="storyPhase @(storyNav == 1 ? "active" : "")" @onclick="() => OnStepClicked(1)">
                                                <div class="step-indicator"></div>
                                            </button>
                                            <button class="storyPhase @(storyNav == 2 ? "active" : "")" @onclick="() => OnStepClicked(2)">
                                                <div class="step-indicator"></div>
                                            </button>
                                            <button class="storyPhase @(storyNav == 3 ? "active" : "")" @onclick="() => OnStepClicked(3)">
                                                <div class="step-indicator"></div>
                                            </button>
                                        </div>

                                    </div>

                                </div>


                                @if (storyNav == 1 && subCatsTotalsStory.Count > 0)
                                {
                                    <div class="outerText">
                                        <div class="storyTitle">היי @currentUser.firstName! רוצה לראות איך עובר החודש?</div>
                                        <div>אלה תתי הקטגוריות שהכי בלטו עד כה:</div>
                                    </div>
                                    <div class="outerFirstStory" @onclick="NextStory">
                                        <div class="firstStoryLike">
                                            <span class="likeIcon">👍</span>
                                            <div class="storyTextWrapper">
                                                <h3 class="titleFirstStory">החסכון הגדול ביותר</h3>
                                                @if (Math.Round(subCatsTotalsStory[bestSavingIndex].currentMonthTotal) > 0)
                                                {
                                                    <div>עד כה החודש הוצאת @Math.Round(subCatsTotalsStory[bestSavingIndex].currentMonthTotal)₪ על @bestSavingSubCat, @bestSavingValue₪ פחות מחודש שעבר! </div>
                                                }
                                                else
                                                {
                                                    <div>עד כה, לא נמצאו תתי קטגוריות בהן הוצאת פחות מחודש שעבר.</div>
                                                }
                                            </div>

                                        </div>
                                        <div class="divider"></div>
                                        <div class="firstStoryLike">
                                            <span class="likeIcon">👎</span>
                                            <div class="storyTextWrapper">

                                                <h3 class="titleFirstStory">העלייה הגדולה ביותר</h3>
                                                @if(Math.Round(subCatsTotalsStory[worstSavingIndex].currentMonthTotal) > 0)
                                                {
                                                    <div>
                                                        עד כה החודש הוצאת @Math.Round(subCatsTotalsStory[worstSavingIndex].currentMonthTotal)₪ על @worstSavingSubCat, @worstSavingValue₪ יותר מחודש שעבר! 
                                                        </div>
                                                }
                                                else
                                                {
                                                     <div>עד כה, לא נמצאו תתי קטגוריות בהן הוצאת יותר מחודש שעבר.</div>
                                                }
                                            </div>
                                        </div>
                                        <div class="imgWrapper">

                                            <img class="storyImg" src="./css/images/calendar2.svg" />
                                        </div>
                                    </div>
                                }
                                else if (storyNav == 1 && subCatsTotalsStory.Count == 0)
                                {
                                    <div class="outerSecondStory" @onclick="NextStory">

                                        <h3 class="storyTitle">לא נמצאו הוצאות או הכנסות החודש</h3>
                                        <div class="noTagsDiv">
                                        </div>
                                        <div class="imgWrapper">

                                            <img class="storyImg" src="./css/images/calendar2.svg" />
                                        </div>
                                    </div>
                                }
                                else if (storyNav == 2 && tagsSpendingsList.Count > 0)
                                {
                                    tagCounter = 0;
                                    <div class="outerSecondStory" @onclick="NextStory">

                                        <h3 class="storyTitle">התגיות עם הכי הרבה הוצאות</h3>
                                        <ol class="outerStoryTags">
                                            @foreach (TagsAndSpendingsToShow tag in tagsSpendingsList)
                                            {
                                                tagCounter++;
                                                <div class="outerPerTag">
                                                    <div class="storyTagNum">
                                                        <div>@tagCounter</div>
                                                    </div>


                                                    <span>הוצאת על</span>
                                                    <div class="storyTag" style="background-color:@tag.tagColor">
                                                        @tag.tagTitle
                                                    </div>
                                                    <span class="tagsAmount">@tag.totalValue ₪</span>
                                                </div>
                                                <div class="divider"></div>
                                            }
                                        </ol>
                                        <div class="imgWrapper">
                                            <img class="storyImg" src="./css/images/tags-story.svg" />
                                        </div>
                                    </div>

                                }
                                else if (storyNav == 2 && tagsSpendingsList.Count == 0)
                                {

                                    <div class="outerSecondStory" @onclick="NextStory">

                                        <h3 class="storyTitle">לא נמצאו הזנות עם תגיות החודש</h3>
                                        <div class="noTagsDiv">
                                        </div>
                                        <div class="imgWrapper">
                                            <img class="storyImg" src="./css/images/tags-story.svg" />
                                        </div>
                                    </div>
                                }
                                else if (storyNav == 3)
                                {
                                    tagCounter = 0;
                                    <div class="outerThirdStory" @onclick="NextStory">
                                        <h3 class="storyTitle">התזרים שלי עד כה החודש</h3>
                                        <div class="titleFirstStory">פילוח ההוצאות שלך לפי קטגוריות</div>



                                        <MonthlyStoryGraphComponent userID="@userID" allUserCategories="@currentUser.categoriesFullList" incomeSumValue="displayTotalIncome"></MonthlyStoryGraphComponent>

                                        @if (incomeSum != null && incomeSum > 0)
                                        {

                                            <div class="titleFirstStory incomeStory">💸 ההכנסות שלך עומדות כרגע על @incomeSum ₪</div>

                                        }
                                        else
                                        {
                                            <div class="titleFirstStory incomeStory">💸 לא הוזנו הכנסות בחודש זה.</div>
                                        }

                                    </div>


                                }
                            </div>

                        </div>
                        <style>
                            .storyPhase {
                                background-color: #D6D9F1;
                                width: 20px;
                                height: 20px;
                            }

                                .storyPhase.active {
                                    background-color: #6874f4;
                                }
                        </style>

                    </div>
                }

            </div>
        </div>

        <div class="toggleWrap">

            @if (isChecked)
            {
                <div class="innerToggle">
                    <p class="toggleTitles">הכנסות</p>

                    <label class="switch">
                        <span class="knob"></span>
                        <input type="checkbox" @bind="isChecked">
                        <span class="slider"></span>
                    </label>

                    <p class="toggleTitlesNotChosen">הוצאות</p>
                </div>

            }
            else
            {
                <div class="innerToggle">
                    <p class="toggleTitlesNotChosen">הכנסות</p>

                    <label class="switchSpendings">
                        <span class="knob"></span>
                        <input type="checkbox" class="hidden-checkbox" @bind="isChecked">
                        <span class="slider"></span>
                    </label>

                    <p class="toggleTitles">הוצאות</p>
                </div>
            }
        </div>

        @if (userIncomeCat != null && isChecked)
        {
            <CategoryComponent Category="@userIncomeCat" categoryTitle="userIncomeCat.categroyTitle" icon="userIncomeCat.icon" categoryColor="@userIncomeCat.color" doRefresh="@doRefresh" userID="@userID" deleteCat="removeCat" subCatRefreshed="@accordionRefresh" givingSubCatBudget="changeGivingSubCatBudget" givingSubCat="givingSubCatToUpdate" closeOverlay="openEditCategoryOverlay" closeEdit="closeEdit" closeDelete="closeDelete" updatedStreakStat="updateStreak" categoryTypeIndicator="true" updateTransSum="refreshTransSumTotals" updateBudget="refreshBudgetsOfSubCats"></CategoryComponent>
        }
        @if (!isChecked) // עובר להוצאות
        {
            //add cat button:
            if (currentUser.categoriesFullList.Count < 16)
            {
                <button @onclick="openCategoryOverlay" id="AddNewCat">
                    <div class="emoji-circle">
                        📁
                    </div>
                    <p class="addTitle">הוספת קטגוריה חדשה</p>
                </button>
            }
            else
            {
                <button @onclick="openCategoryOverlay" disabled style="opacity:60%" id="AddNewCat">
                    <div class="emoji-circle">
                        📁
                    </div>
                    <p class="addTitle">הוספת קטגוריה חדשה</p>
                </button>
                @*     לשנות את טקסט הכפתור אחרי שנוסיף עיצוב dis*@
            }

            @if (!string.IsNullOrEmpty(searchQuery))
            {
                @if (toSearch && (currentUser.categoriesFullList.Any(c => string.IsNullOrEmpty(searchQuery) || c.categroyTitle.ToLower().Contains(searchQuery.ToLower()))))
                {
                    @foreach (CategoryToShow category in currentUser.categoriesFullList.Where(c => string.IsNullOrEmpty(searchQuery) || c.categroyTitle.ToLower().Contains(searchQuery.ToLower())))
                    {
                        categoryIdToSend = category.id;
                        if (category.id == givingsubCatCategoryID)
                        {
                            <div class="fullCategory">
                                <CategoryComponent Category=category categoryTitle="category.categroyTitle" icon="category.icon" categoryColor="@category.color" doRefresh="@doRefresh" userID="@userID" deleteCat="removeCat" subCatRefreshed="@accordionRefresh" givingSubCatBudget="changeGivingSubCatBudget" givingSubCat="givingSubCatToUpdate" closeOverlay="openEditCategoryOverlay" closeEdit="closeEdit" closeDelete="closeDelete" updatedStreakStat="updateStreak" updateTransSum="refreshTransSumTotals" updateBudget="refreshBudgetsOfSubCats"></CategoryComponent>
                            </div>

                        }
                        else
                        {
                            <div class="fullCategory">
                                <CategoryComponent Category=category categoryTitle="category.categroyTitle" icon="category.icon" categoryColor="@category.color" doRefresh="@doRefresh" userID="@userID" deleteCat="removeCat" subCatRefreshed="@accordionRefresh" givingSubCatBudget="changeGivingSubCatBudget" closeOverlay="openEditCategoryOverlay" closeEdit="closeEdit" closeDelete="closeDelete" updatedStreakStat="updateStreak" updateTransSum="refreshTransSumTotals" updateBudget="refreshBudgetsOfSubCats"></CategoryComponent>
                            </div>

                        }
                    }

                    toSearch = false;
                }
                else
                {
                    if (toSearch)
                    {
                        <p>אופס, לא נמצא תוצאה שמתאימה לחיפוש</p>
                    }

                }
            }
            else
            {

                @foreach (CategoryToShow category in currentUser.categoriesFullList)
                {
                    foreach (CategoryOverDraftCheckToShow c in checkOverdraftingCats)
                    {
                        if (c.id == category.id && c.monthlyPlannedBudget < c.totalTransSum)
                        {
                            <span>חריגה⚠️</span>
                        }
                    }

                    if (category == currentUser.categoriesFullList[0]) //for onboarding purposes:
                    {
                        <div class="fullCategory">
                            <CategoryComponent Category=category categoryTitle="category.categroyTitle" icon="category.icon" doRefresh="@doRefresh" userID="@userID" deleteCat="removeCat" subCatRefreshed="@accordionRefresh" givingSubCatBudget="changeGivingSubCatBudget" givingSubCat="givingSubCatToUpdate" closeOverlay="openEditCategoryOverlay" closeEdit="closeEdit" closeDelete="closeDelete" updatedStreakStat="updateStreak" categoryColor="@category.color" updateTransSum="refreshTransSumTotals" updateBudget="refreshBudgetsOfSubCats"></CategoryComponent>

                        </div>
                    }
                    else
                    {
                        <div class="fullCategory">
                            <CategoryComponent Category=category categoryTitle="category.categroyTitle" icon="category.icon" doRefresh="@doRefresh" userID="@userID" deleteCat="removeCat" subCatRefreshed="@accordionRefresh" givingSubCatBudget="changeGivingSubCatBudget" givingSubCat="givingSubCatToUpdate" closeOverlay="openEditCategoryOverlay" closeEdit="closeEdit" closeDelete="closeDelete" updatedStreakStat="updateStreak" categoryColor="@category.color" updateTransSum="refreshTransSumTotals" updateBudget="refreshBudgetsOfSubCats"></CategoryComponent>

                        </div>
                    }


                }

                @* meant to create a gap under the last category*@
                <div style="padding: 0.5rem;"></div>
            }


            @if (!string.IsNullOrEmpty(searchQuery))
            {
                @if (toSearch && (finalsearchSubCats.Any(sb => string.IsNullOrEmpty(searchQuery) || sb.subCategoryTitle.ToLower().Contains(searchQuery.ToLower()))))
                {

                    foreach (var subCat in finalsearchSubCats)
                    {
                        CategoryToShow matchingCategory = currentUser.categoriesFullList.FirstOrDefault(cat => cat.id == subCat.categoryID);


                        if (matchingCategory != null)
                        {
                            // If the category already exists in the dictionary, add the subcategory to the existing list
                            if (categorizedSubCats.ContainsKey(matchingCategory))
                            {
                                categorizedSubCats[matchingCategory].Add(subCat.id);
                            }
                            else
                            {
                                // Otherwise, create a new list and add it to the dictionary
                                categorizedSubCats.Add(matchingCategory, new List<int> { subCat.id });
                            }
                        }

                    }



                    toSearch = false;


                }
                else
                {
                    if (finalsearchSubCats.Any(sb => string.IsNullOrEmpty(searchQuery)) && toSearch)
                    {
                        <p> אופס, לא נמצא תוצאה שמתאימה לחיפוש </p>
                    }

                }

            }

            @if (categorizedSubCats.Count > 0)
            {
                foreach (var entry in categorizedSubCats)
                {
                    CategoryToShow category = entry.Key;
                    List<int> relevantSubCats = entry.Value;

                    if (relevantSubCats.Count > 0 && category != null)
                    {
                        <div class="fullCategory">
                            <CategoryComponent Category=category
                           categoryTitle="@category.categroyTitle"
                           icon="@category.icon"
                           categoryColor="@category.color"
                           doRefresh="@doRefresh"
                           userID="@userID"
                           deleteCat="@removeCat"
                           subCatRefreshed="@accordionRefresh"
                           givingSubCatBudget="@changeGivingSubCatBudget"
                           givingSubCat="@givingSubCatToUpdate"
                           searchedSubCats="@relevantSubCats"
                           isSubCatSearched="@makeSearchAgain"
                           categoryTypeIndicator="@isChecked"
                           closeOverlay="openEditCategoryOverlay"
                           closeEdit="closeEdit"
                           closeDelete="closeDelete"
                           updatedStreakStat="updateStreak"
                           updateTransSum="refreshTransSumTotals"
                           updateBudget="refreshBudgetsOfSubCats">
                            </CategoryComponent>
                        </div>

                    }
                }
            }

        }
    }
</div>

<div id="@hideNav" class="bottom-nav" @ref="navBar">
    <button class="navBtn" style="opacity:60%">מבט לעבר<img src="./css/images/past.svg" /></button>
    <div class="NavLines"> </div>
    <button class="navBtn" style="@currentPresentNavPage" @onclick="goToPresentHomePage">מבט להווה<img src="./css/images/present.svg" /></button>
    <div class="NavLines"> </div>
    <button class="navBtn" style="@currentFuturetNavPage" @onclick="goToFutureHomePage">מבט לעתיד<img src="./css/images/future.svg" /></button>
</div>

@code {

    [Parameter]
    public int userID { get; set; }

    [CascadingParameter]
    private UserDTO user { get; set; }

    //[Inject]
    //private ITourService TourService { get; set; }


     bool isScrollingDown = false;
    string hideNav => isScrollingDown ? "nav-hidden" : "bottomNav";
    string currentPresentNavPage = "font-weight:600; color:#6775F4;";
    string currentFuturetNavPage = "";


    userToShow currentUser;
    UserToAdd newUser = new UserToAdd();
    CategoryToShow defaultCategory = new CategoryToShow();
    List<CategoryToShow> searchCats = new List<CategoryToShow>();
    List<SubCategoryToAdd> searchSubCats = new List<SubCategoryToAdd>();
    List<SubCategoryToAdd> finalsearchSubCats = new List<SubCategoryToAdd>();
    List<int> subCatsToSearchIds = new List<int>();

    Dictionary<CategoryToShow, List<int>> categorizedSubCats = new Dictionary<CategoryToShow, List<int>>();

    private string currentMonth;
    private bool isChecked = false;
    string msg = "";
    string hideBtn = "";
    bool noEmojiBtn = false;
    private string visibilityClass => isVisible ? "visible" : "removeKeybord";
    string searchQuery = "";
    string currentSearch = "";
    string titleInput = "";
    //string BgOverlay => isOverlay ? "BgOverlay" : "";
    string BgOverlay = "";
    int newCurrentUserId;
    int categoryIdToSend;
    int tagCounter = 0;
    int startMonthDate = 0;
    private int refreshKey;

    bool doRefresh = false;
    bool isOnInitializedOver = false;
    bool accordionRefresh = true;
    bool toSearch = false;
    bool isOverlay = false;
    bool isEditOverlay = false;
    bool isCancleBtnClicked = false;
    bool openDaysOptions = false;
    //bool makeSearchAgain = false;
    //bool isThereCategories => currentUser.categoriesFullList == null || currentUser.categoriesFullList.Count == 0;




    public bool storyPopUpWindow = false;
    List<StorySubCategoryTotals> subCatsTotalsStory = new List<StorySubCategoryTotals>();
    string bestSavingSubCat = "";
    string worstSavingSubCat = "";
    int bestSavingIndex = 0;
    int worstSavingIndex = 0;
    double bestSavingValue = 0;
    double worstSavingValue = 0;
    int storyNav = 1;
    List<TagsAndSpendingsToShow> tagsSpendingsList = new List<TagsAndSpendingsToShow>();
    double incomeSum = 0;


    CategoryToShow userIncomeCat = new CategoryToShow();

    CategoryToShow catToDelete = new CategoryToShow();

    CategoryToAdd newCategory = new CategoryToAdd();
    bool openAddCatOverlay = false;

    OverDraftBudgetToEdit givingSubCatToUpdate = new OverDraftBudgetToEdit();
    public int givingsubCatCategoryID = 0;


    List<SubCategoryToShow> incomeSubCats = new List<SubCategoryToShow>();

    int currentStreak = 0;
    string streakStatTitle = "";
    bool streakOverlay = false;
    string streakImgSrc = "";
    string streakImgIcon = "";
    int weeklyTransAmount = 0;
    List<string> streakStatusOpt = new List<string>()
    {
    "מטבע ארד", "מטבע כסף", "מטבע זהב", "שטר", "שטרות","גביע","יהלום"
    };
    int nextStreakStatIn = 0;
    bool streakExpBubble = false;


    List<CategoryOverDraftCheckToShow> checkOverdraftingCats = new List<CategoryOverDraftCheckToShow>();
    private bool isVisible = false;
    private string selectedCategory = "כללי";
    private Dictionary<string, List<string>> emojiCategories = new Dictionary<string, List<string>>
    {
    {"כללי", new List<string> {
    "🏠", "🛏️", "🚿", "💡", "📞", "🖥️", "🚗", "🚌", "🛒", "🍲",
    "🏥", "💊", "👕", "🧹", "🧺", "🍼", "🐶", "🧑‍🔧", "📚", "🧾",
    "🕶️", "🌂", "🔑", "📦"
    }},
    {"כיף", new List<string> {
    "🎭", "🎟️", "🎮", "🎨", "📸", "🍽️", "🏋️‍♂️", "🧘", "🎸", "✈️",
    "🏕️", "🛍️", "🍷", "🎁", "🎈", "📖", "🍰", "🌐", "🕹️", "🚤",
    "🚵", "🛀", "🎷", "🎙️"
    }},
    {"פיננסי", new List<string> {
    "💳",
    "🏦", "💰", "🪙", "💸", "💹",
    "📈", "📉", "📊", "💲", "🏧",
    "🧾", "💱", "💲", "💹", "🏦",
    "🖋️", "💎", "📜", "🏧",
    "📅", "🖥️", "🖨️", "🔍"
    }}
    };





    bool overdraftDetected = false;
    bool overdraftOverlayOpen = false;
    bool overdraftNotTreated = false;
    bool openSubCatsOptions = false;
    OverBudgetToShow chosenSubCategory = new OverBudgetToShow();
    OverBudgetToShow overDraftSubCategory = new OverBudgetToShow();
    List<OverBudgetToShow> closeOverdraftOpts = new List<OverBudgetToShow>();
    double currentGap = 0;

    bool isDisabled = false;
    bool tutorialActive = false;
    bool expBubbleOpen = false;
    string elementToExp = "";



    protected override async Task OnInitializedAsync()
    {

        //await JSRuntime.InvokeVoidAsync("showAnimationForTwoSeconds");
        userID = user.Id;
        await Task.Delay(10000);

        int currentMonthNumber = DateTime.Now.Month; // Gets the current month number
        currentMonth = GetHebrewMonthName(currentMonthNumber);
        //StateHasChanged();


        var userRes = await Http.GetAsync("api/Present/userToShowByDate/" + userID);

        if (userRes.IsSuccessStatusCode)
        {
            currentUser = userRes.Content.ReadFromJsonAsync<userToShow>().Result;
            userID = currentUser.id;
            searchCats = currentUser.categoriesFullList;

            await getCurrentStreak();


            Console.WriteLine("current streak status- " + currentUser.streakStatus);

            var getCatDetails = await Http.GetAsync("api/Present/checkOverdraftCats/" + userID);
            if (getCatDetails.IsSuccessStatusCode)
            {
                checkOverdraftingCats = getCatDetails.Content.ReadFromJsonAsync<List<CategoryOverDraftCheckToShow>>().Result;
            }

            var subCatToSearch = await Http.GetAsync("api/Present/getSubCategoryTitle/" + userID);

            if (subCatToSearch.IsSuccessStatusCode)
            {
                List<SubCategoryToAdd> subCatId = subCatToSearch.Content.ReadFromJsonAsync<List<SubCategoryToAdd>>().Result;
                searchSubCats = subCatId;

            }
            else
            {
                Console.WriteLine("couldn't find any sub categories");
            }

            var getIncomeCatID = await Http.GetAsync("api/Present/incomeCatId/" + userID);
            if (getIncomeCatID.IsSuccessStatusCode)
            {
                int incomeID = await getIncomeCatID.Content.ReadFromJsonAsync<int>();
                if (incomeID > 0)
                {
                    for (int i = 0; i < currentUser.categoriesFullList.Count; i++)
                    {
                        if (currentUser.categoriesFullList[i].id == incomeID)
                        {
                            userIncomeCat = currentUser.categoriesFullList[i];
                            currentUser.categoriesFullList.RemoveAt(i);
                        }

                    }
                }
                else
                {
                    Console.WriteLine("insufficient income id- it's not larger than 0");
                }

            }
            else
            {
                Console.WriteLine("couldn't find income category that belongs to this user");
            }

            if (currentUser.passedOnboarding == false)
            {

                tutorialActive = true;

                isDisabled = true;

            }
        }
        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;
            switch (error)
            {
                case "User Not Found":
                    msg = "User not found ";
                    break;
            }

        }

    }

    /// <summary>
    /// Happens when the user clicks okay in the onboarding overlay
    /// </summary>
    private async Task PassOnboarding()
    {
        var userPassReq = await Http.GetAsync("api/Present/passOnboarding/" + userID);
        if (userPassReq.IsSuccessStatusCode)
        {
            isDisabled = false;
            tutorialActive = false;
        }
    }

    public void expBubbleToolTip(string elementName)
    {
        if (elementName == "streakPopUp")
        {
            streakExpBubble = !streakExpBubble;
            expBubbleOpen = false;
        }
        else
        {
            expBubbleOpen = !expBubbleOpen;
            streakExpBubble = false;
        }

        if (expBubbleOpen || streakExpBubble)
        {
            elementToExp = elementName;
        }
    }

    public void closeExpOverlay()
    {
        expBubbleOpen = false;
    }

    /// <summary>
    /// gets the current streak when the page loads
    /// </summary>
    public async Task getCurrentStreak()
    {
        var streakDataRes = await Http.GetAsync("api/Present/checkCurrentStreak/" + userID); //checks the total week amount with minimum 3 transactions- including the current week
        if (streakDataRes.IsSuccessStatusCode)
        {
            List<TransAmountByWeekToShow> transCountByWeeksList = new List<TransAmountByWeekToShow>();
            transCountByWeeksList = streakDataRes.Content.ReadFromJsonAsync<List<TransAmountByWeekToShow>>().Result;

            int weekAmount = 0;
            if (transCountByWeeksList.Count >= 1)
            {
                foreach (TransAmountByWeekToShow week in transCountByWeeksList)
                {
                    if (week.transactionCount >= 3)
                    {
                        weekAmount++;
                    }
                }
            }
            string streakStatCheck = streakStatusCheck(weekAmount);

            var getCurrentStatRes = await Http.GetAsync("api/Present/getUserStreakStatus/" + userID); //gets the current streak status title
            if (getCurrentStatRes.IsSuccessStatusCode)
            {
                streakStatTitle = await getCurrentStatRes.Content.ReadAsStringAsync();
                if (streakStatTitle != streakStatCheck)
                {
                    var updateStreakRes = await Http.GetAsync("api/Present/updateStreakStat/" + userID + "/" + streakStatTitle); //updates the status title if necessary
                    if (updateStreakRes.IsSuccessStatusCode)
                    {
                        Console.WriteLine("streak status up to date");
                    }
                    else
                    {
                        Console.WriteLine("failed to update streak status on page load, shown streak isn't necessarily accurate");
                    }

                    streakStatTitle = streakStatCheck;

                }

                switch (streakStatTitle) //will fill the related streak image route
                {
                    case "מטבע ארד":

                        streakImgIcon = "./css/images/bronzeCoin.svg";

                        break;
                    case "מטבע כסף":

                        streakImgIcon = "./css/images/silverCoin.svg";

                        break;
                    case "מטבע זהב":

                        streakImgIcon = "./css/images/goldCoin.svg";

                        break;
                    case "שטר":

                        streakImgIcon = "./css/images/singleCashNote.svg";

                        break;
                    case "שטרות":

                        streakImgIcon = "./css/images/cashNotes.svg";

                        break;
                    case "גביע":

                        streakImgIcon = "./css/images/goblet.svg";

                        break;
                    case "יהלום":

                        streakImgIcon = "./css/images/diamond.svg";

                        break;
                    default:
                        Console.WriteLine("no picture is associated with this streak");
                        streakImgIcon = "";

                        break;
                }

            }
        }

    }

    /// <summary>
    /// translates the amount of weeks where a user has added at least 3 transactions to the relevent streak title
    /// </summary>
    public string streakStatusCheck(int weekAmount)
    {

        if (weekAmount <= 1 && weekAmount < 2)
        {
            if (weekAmount == 0)
            {

                return "";
            }
            else
            {

                return "מטבע ארד";
            }

        }
        else if (weekAmount >= 2 && weekAmount <= 9)
        {

            return "מטבע כסף";
        }
        else if (weekAmount > 9 && weekAmount <= 12)
        {

            return "מטבע זהב";
        }
        else if (weekAmount > 12 && weekAmount <= 20)
        {

            return "שטר";
        }
        else if (weekAmount > 20 && weekAmount <= 24)
        {

            return "שטרות";
        }
        else if (weekAmount <= 32 && weekAmount > 24)
        {

            return "גביע";
        }
        else if (weekAmount > 32)
        {

            return "יהלום";
        }
        else
        {
            return "";
        }
    }


    private string GetHebrewMonthName(int monthNumber)
    {
        switch (monthNumber)
        {
            case 1:
                return "ינואר";
            case 2:
                return "פברואר";
            case 3:
                return "מרץ";
            case 4:
                return "אפריל";
            case 5:
                return "מאי";
            case 6:
                return "יוני";
            case 7:
                return "יולי";
            case 8:
                return "אוגוסט";
            case 9:
                return "ספטמבר";
            case 10:
                return "אוקטובר";
            case 11:
                return "נובמבר";
            case 12:
                return "דצמבר";
            default:
                return "חודש לא תקין"; // Handle invalid month numbers
        }
    }


    public async Task refreshBudgetsOfSubCats(double? refreshBudget)
    {
        if (refreshBudget.HasValue)
        {
            double budgetPercentage = 0;
            double ogBudget = 0;
            var getTotalBudgetRec = await Http.GetAsync("api/Present/getUserTotalBudget/" + userID);
            if (getTotalBudgetRec.IsSuccessStatusCode)
            {
                ogBudget = getTotalBudgetRec.Content.ReadFromJsonAsync<double>().Result;
            }
            else
            {

                budgetPercentage = currentUser.budgetFullValue;

                ogBudget = currentUser.spendingValueFullList / (budgetPercentage / 100);
            }


            ogBudget += refreshBudget.Value;

            if (currentUser.spendingValueFullList > 0)
            {
                currentUser.budgetFullValue = (currentUser.spendingValueFullList / ogBudget) * 100;
            }

        }
    }

    public async Task refreshTransSumTotals(double transValue)
    {
        Console.WriteLine("currentUser.budgetFullValue in % - " + currentUser.budgetFullValue);

        if (!isChecked) //means it's an expense
        {
            double ogBudget = 0;

            var getTotalBudgetRec = await Http.GetAsync("api/Present/getUserTotalBudget/" + userID);
            if (getTotalBudgetRec.IsSuccessStatusCode)
            {
                ogBudget = getTotalBudgetRec.Content.ReadFromJsonAsync<double>().Result;

            }
            else
            {
                //if budget wasn't found in DB it calculates based on whats in the page:
                double budgetPercentage = 0;

                budgetPercentage = currentUser.budgetFullValue;
                ogBudget = currentUser.spendingValueFullList / (budgetPercentage / 100);
            }

            currentUser.spendingValueFullList += transValue;
            Console.WriteLine("isChecked- " + isChecked + ", transValue- " + transValue);
            //refreshing the budget accordingly:

            currentUser.budgetFullValue = (currentUser.spendingValueFullList / ogBudget) * 100;
        }
        else //means it's an income
        {
            currentUser.incomeValueFullList += transValue;
            //Console.WriteLine("isChecked- " + isChecked + ", transValue- " + transValue);
        }

        await getStreakDetails();

    }


    public async Task removeCat(CategoryToShow catallToDelete)
    {
        catToDelete = catallToDelete;
        currentUser.categoriesFullList.Remove(catallToDelete);

        for (int i = searchSubCats.Count - 1; i > -1; i--)
        {
            if (searchSubCats[i].categoryID == catToDelete.id)
            {
                searchSubCats.Remove(searchSubCats[i]);
            }
        }

        await OnInitializedAsync();

    }

    public async Task changeGivingSubCatBudget(OverDraftBudgetToEdit givingSubCat)
    {
        var getCatID = await Http.GetAsync("api/Present/getGivingCatID/" + givingSubCat.id);
        if (getCatID.IsSuccessStatusCode)
        {
            givingsubCatCategoryID = await getCatID.Content.ReadFromJsonAsync<int>();
            givingSubCatToUpdate.id = givingSubCat.id;
            givingSubCatToUpdate.monthlyPlannedBudget = givingSubCat.monthlyPlannedBudget;
        }
    }

    public void openCategoryOverlay()
    {
        openAddCatOverlay = !openAddCatOverlay;
        newCategory = new CategoryToAdd();
    }

    public void openEditCategoryOverlay()
    {
        BgOverlay = "BgOverlay";
        isEditOverlay = true;

    }

    public void closeEdit()
    {
        isEditOverlay = false;

    }
    public void closeDelete()
    {
        isEditOverlay = false;
        BgOverlay = "BgOverlay";
    }

    public void AddNewCat(CategoryToShow newCategory)
    {
        if (newCategory != null)
        {
            currentUser.categoriesFullList.Add(newCategory);
        }
    }

    void UpdateSearchQuery(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
    }

    void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")  // Trigger when Enter key is released
        {
            toSearch = true;

            if (string.IsNullOrEmpty(searchQuery))
            {
                finalsearchSubCats = new List<SubCategoryToAdd>();
            }
            FilterCatsOrSubCats();
        }

    }


    void SearchAfterClick()
    {
        toSearch = true;

        if (string.IsNullOrEmpty(searchQuery))
        {
            finalsearchSubCats = new List<SubCategoryToAdd>();
        }
        FilterCatsOrSubCats();
    }

    void FilterCatsOrSubCats()
    {
        if (!string.IsNullOrEmpty(searchQuery))
        {
            searchCats = currentUser.categoriesFullList.Where(category => category.categroyTitle.Contains(searchQuery)).ToList();
            finalsearchSubCats = searchSubCats.Where(subCategory => subCategory.subCategoryTitle.Contains(searchQuery)).ToList();

        }
        else
        {
            searchCats = null; // Show all categories if the search query is empty

        }
    }

    void makeSearchAgain(bool filter)
    {
        filter = false;
        FilterCatsOrSubCats();
    }

    public async Task getSubCatTotalsForStory()
    {

        List<SubCategoryToShow> subCategories = new List<SubCategoryToShow>();
        subCatsTotalsStory = new List<StorySubCategoryTotals>();
        //first story stuff:
        if (currentUser.categoriesFullList.Count > 0)
        {
            foreach (CategoryToShow cat in currentUser.categoriesFullList)
            {
                var getAllSubCats = await Http.GetAsync("api/Present/subCategoryToShow/" + cat.id);
                if (getAllSubCats.IsSuccessStatusCode)
                {
                    List<SubCategoryToShow> subToAddList = getAllSubCats.Content.ReadFromJsonAsync<List<SubCategoryToShow>>().Result;
                    if (subToAddList.Count > 0)
                    {
                        foreach (SubCategoryToShow subToAdd in subToAddList)
                        {
                            subCategories.Add(subToAdd);
                        }

                    }
                    else
                    {
                        Console.WriteLine("couldn't get one of the sub cats for the story- returned null");
                    }
                }
                else
                {
                    Console.WriteLine("couldn't get one of the sub cats for the story- server bad request");
                }
            }
            if (subCategories.Count > 0)
            {
                foreach (SubCategoryToShow subToCheck in subCategories)
                {
                    var getSubCatTotals = await Http.GetAsync("api/Present/getBestAndWorstSpendings/" + subToCheck.id);
                    if (getSubCatTotals.IsSuccessStatusCode)
                    {
                        StorySubCategoryTotals requestedSubInfo = await getSubCatTotals.Content.ReadFromJsonAsync<StorySubCategoryTotals>();
                        if (requestedSubInfo != null)
                        {
                            subCatsTotalsStory.Add(requestedSubInfo);
                        }
                        else
                        {
                            Console.WriteLine("couldn't get totals of one of the sub cats for the story- returned null");
                        }

                    }
                    else
                    {
                        Console.WriteLine("couldn't get totals of one of the sub cats for the story- server bad request");
                    }
                }
                if (subCatsTotalsStory.Count > 0)
                {
                    bestSavingValue = subCatsTotalsStory[0].lastMonthTotal - subCatsTotalsStory[0].currentMonthTotal;
                    worstSavingValue = subCatsTotalsStory[0].lastMonthTotal - subCatsTotalsStory[0].currentMonthTotal;

                    for (int i = 1; i < subCatsTotalsStory.Count; i++)
                    {
                        double gapCheck = subCatsTotalsStory[i].lastMonthTotal - subCatsTotalsStory[i].currentMonthTotal;
                        if (gapCheck < worstSavingValue)
                        {
                            worstSavingValue = gapCheck;
                            worstSavingIndex = i;
                        }
                        else if (gapCheck > bestSavingValue)
                        {
                            bestSavingValue = gapCheck;
                            bestSavingIndex = i;
                        }
                    }

                    bestSavingSubCat = subCatsTotalsStory[bestSavingIndex].subCategoryTitle;
                    bestSavingValue = Math.Round(subCatsTotalsStory[bestSavingIndex].lastMonthTotal - subCatsTotalsStory[bestSavingIndex].currentMonthTotal, 2);
                    if (bestSavingValue < 0)
                    {
                        bestSavingValue *= -1;
                    }

                    worstSavingSubCat = subCatsTotalsStory[worstSavingIndex].subCategoryTitle;
                    worstSavingValue = Math.Round(subCatsTotalsStory[worstSavingIndex].currentMonthTotal - subCatsTotalsStory[worstSavingIndex].lastMonthTotal, 2);
                    if (worstSavingValue < 0)
                    {
                        worstSavingValue *= -1;
                    }
                }
            }

            //second story stuff:
            tagsSpendingsList = new List<TagsAndSpendingsToShow>();
            var getUserSpendingsByTags = await Http.GetAsync("api/Present/GetTagsAndSpendings/" + currentUser.id);
            if (getUserSpendingsByTags.IsSuccessStatusCode)
            {
                tagsSpendingsList = getUserSpendingsByTags.Content.ReadFromJsonAsync<List<TagsAndSpendingsToShow>>().Result;
            }

            storyNav = 1;
            storyPopUpWindow = true;
        }
        else
        {
            storyNav = 0;
            storyPopUpWindow = false;
        }
    }

    public void StoryWindowControl()
    {
        tagCounter = 0;
        storyPopUpWindow = !storyPopUpWindow;
    }

    public void NextStory()
    {
        tagCounter = 0;
        if (storyNav < 3)
        {
            storyNav++;
        }
    }

    private async Task OnStepClicked(int step)
    {
        tagCounter = 0;
        if (step != storyNav && storyNav <= 3)
        {
            storyNav = step;
            Console.WriteLine("storyNav- " + storyNav);
        }
    }

    public void displayTotalIncome(double incomeSum_)
    {
        incomeSum = incomeSum_;
    }

    /// <summary>
    /// checks if a new streak was achieved after adding a transaction. If necessary, opens the streak pop up.
    /// </summary>
    public async Task getStreakDetails()
    {
        Console.WriteLine("reached get streak details");
        if (userID > 0)
        {
            var streakDataRes = await Http.GetAsync("api/Present/checkCurrentStreak/" + userID);
            if (streakDataRes.IsSuccessStatusCode)
            {
                List<TransAmountByWeekToShow> transCountByWeeksList = new List<TransAmountByWeekToShow>();
                transCountByWeeksList = streakDataRes.Content.ReadFromJsonAsync<List<TransAmountByWeekToShow>>().Result;

                currentStreak = 0;
                if (transCountByWeeksList.Count > 1)
                {

                    foreach (TransAmountByWeekToShow week in transCountByWeeksList)
                    {
                        if (week.transactionCount >= 3)
                        {
                            currentStreak++;
                        }
                    }
                }
                else if (transCountByWeeksList.Count == 1)
                {
                    if (transCountByWeeksList[0].transactionCount >= 3)
                    {
                        currentStreak++;
                    }
                }




                DateTime today = DateTime.Today;

                // Calculate the difference between today and the previous Sunday
                int daysSinceSunday = (int)today.DayOfWeek;

                // Subtract the difference to get the previous Sunday (or today if it's Sunday)
                DateTime currentSunday = today.AddDays(-daysSinceSunday);

                if (transCountByWeeksList[transCountByWeeksList.Count - 1].weekStartDate == currentSunday) //checks if the last week in the week amount list is this week
                {
                    weeklyTransAmount = transCountByWeeksList[transCountByWeeksList.Count - 1].transactionCount;

                    if (transCountByWeeksList[transCountByWeeksList.Count - 1].transactionCount > 2) //checks the amount of transactions done this week so far by checking if the last list item's date is this week's Sunday
                    {
                        if (currentStreak > 0)
                        {
                            string currentStreakTitle = streakStatusCheck(currentStreak);

                            if (streakStatTitle != currentStreakTitle)
                            {
                                int dbStreak = streakStatusOpt.IndexOf(streakStatTitle);
                                int pageStreak = streakStatusOpt.IndexOf(currentStreakTitle);

                                if (dbStreak < pageStreak)
                                {
                                    streakStatTitle = currentStreakTitle;
                                    switch (streakStatTitle) //will fill the related streak image route
                                    {
                                        case "מטבע ארד":
                                            streakImgSrc = "./css/images/Bronze-welldone.svg";
                                            streakImgIcon = "./css/images/bronzeCoin.svg";
                                            nextStreakStatIn = 1;
                                            break;
                                        case "מטבע כסף":
                                            streakImgSrc = "./css/images/silver-welldone.svg";
                                            streakImgIcon = "./css/images/silverCoin.svg";
                                            nextStreakStatIn = 6;
                                            break;
                                        case "מטבע זהב":
                                            streakImgSrc = "./css/images/gold-welldone.svg";
                                            streakImgIcon = "./css/images/goldCoin.svg";
                                            nextStreakStatIn = 4;
                                            break;
                                        case "שטר":
                                            streakImgSrc = "./css/images/note-welldone.svg";
                                            streakImgIcon = "./css/images/singleCashNote.svg";
                                            nextStreakStatIn = 8;
                                            break;
                                        case "שטרות":
                                            streakImgSrc = "./css/images/two-notes-welldone.svg";
                                            streakImgIcon = "./css/images/cashNotes.svg";
                                            nextStreakStatIn = 4;
                                            break;
                                        case "גביע":
                                            streakImgSrc = "./css/images/trophy-welldone.svg";
                                            streakImgIcon = "./css/images/goblet.svg";
                                            nextStreakStatIn = 8;
                                            break;
                                        case "יהלום":
                                            streakImgSrc = "./css/images/dimond-welldone.svg";
                                            streakImgIcon = "./css/images/diamond.svg";
                                            nextStreakStatIn = 35;
                                            break;
                                        default:
                                            Console.WriteLine("no picture is associated with this streak");
                                            streakImgSrc = "";
                                            streakImgIcon = "";
                                            nextStreakStatIn = 3;
                                            break;
                                    }


                                    if (streakStatTitle != "" || streakStatTitle != null)
                                    {
                                        var updateStreak = await Http.GetAsync("api/Present/updateStreakStat/" + userID + "/" + streakStatTitle);
                                        if (updateStreak.IsSuccessStatusCode)
                                        {
                                            streakOverlay = true;
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            streakImgSrc = "";
                            streakImgIcon = "";
                            nextStreakStatIn = 3;
                            streakOverlay = false;
                        }
                    }
                }

            }
        }
    }

    /// <summary>
    /// after adding transactions, updates the streak title in page and calls the function that updates the streak icon in the page and the streak stat in DB.
    /// </summary>

    public async void updateStreak(string? newStreakStat)
    {
        Console.WriteLine("streak status got to present home page, new status is: " + newStreakStat);
        if (newStreakStat != null)
        {

            if (newStreakStat != streakStatTitle)
            {
                streakStatTitle = newStreakStat;
                await getStreakDetails();
            }

        }
    }

    public void goToSProfilePage()
    {
        Nav.NavigateTo("./ProfilePage/" + userID);
    }

    private ElementReference navBar;


    private void SelectEmoji(string emoji)
    {
        //Console.WriteLine($"Emoji selected: {emoji}"); // Replace this with actual logic
        noEmojiBtn = true;
        isCancleBtnClicked = false;
        hideBtn = "hideDefaultEmojiBtn";
        newUser.profilePicOrIcon = emoji;
    }

    private void deleteSelectedEmoji()
    {
        isCancleBtnClicked = true;
        noEmojiBtn = false;
        newUser.profilePicOrIcon = "";
        hideBtn = "";
    }

    private void ToggleKeyboard()
    {
        isVisible = !isVisible;
    }

    private void titleLengthCounter(ChangeEventArgs e)
    {
        titleInput = e.Value.ToString();
        //titleInputLength = titleInput.Length;
    }

    private void SelectCategory(string category)
    {
        selectedCategory = category;
    }

    private void HandleChange(OverBudgetToShow chosenSubCat)
    {
        //var selectedTitle = e.Value.ToString()

        chosenSubCategory = chosenSubCat;
        openSubCatsOptions = !openSubCatsOptions;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("navScroll.init", navBar);
        }
    }

    public void Dispose()
    {
        JSRuntime.InvokeVoidAsync("navScroll.dispose");
    }

    public void goToPresentHomePage()
    {

        currentPresentNavPage = "font-weight:600; color:#6775F4;";
        currentFuturetNavPage = "";
        closeExpOverlay();
        Nav.NavigateTo("./HomePage");
    }

    public void goToFutureHomePage()
    {

        currentFuturetNavPage = "font-weight:600; color:#6775F4;";
        currentPresentNavPage = "";
        closeExpOverlay();
        Nav.NavigateTo("./FutureHomePage");
    }


}


