@page "/"
@inject HttpClient Http
@inject NavigationManager Nav
@using BlazorGoogleLogin.Shared.Models.present.toShow
@using BlazorGoogleLogin.Shared.Models.present.toAdd
@using BlazorGoogleLogin.Shared.Models.present.toEdit
@using BlazorGoogleLogin.Client.Components
@using Microsoft.AspNetCore.Components.Web
@inject DateService DateService
@inject IJSRuntime JSRuntime




<AuthorizeView>
    <Authorized>
        @if (user != null)
        {

            if (signUpForm)
            {
                if (!isPrefrences)
                {

                    <div class="megaOuterLay">
                        <div class="registerOuterLay">
                            <div class="registerBgOverlay"> </div>
                            <div class="outerLogoAndOpeningText">
                                <img src="./css/images/light logo-mini.svg" />
                                <div style="font-size: 1.06rem;">
                                    <div style="font-size: 1.17rem;
    font-weight: 600;
    margin-bottom: 0.3rem;">
                                        אפליקציה לניהול תקציב מבית איה תמרי
                                    </div>
                                    <div>
                                        אנחנו כאן ללוות אותך בדרך לניהול תקציב נכון
                                    </div>
                                </div>
                            </div>
                            <div class="outerRegisterInfo">
                                        <div class="firstLastAndEmoji">
                                            <div class="outerUserDetails">
                                                <span class="titleName">שם פרטי:</span>
                                                <div class="nameInputAndCounterWrap">
                                                    <input class="catTitle" type="text" @bind="@userFirstName" @oninput="userFnameLengthCounter" maxlength="15" />
                                                    <div class="counter">
                                                        @if (userFirstName.Length > 0 && userFirstName.Length < 16)
                                                        {
                                                            <span>@userFirstName.Length/15</span>
                                                        }
                                                        else if (userFirstName.Length <= 0)
                                                        {
                                                            <span>0/15</span>
                                                        }
                                                    </div>
                                                </div>

                                                @if ((newUser.firstName == null || newUser.firstName == "") & isEmpty)
                                                    {
                                                        <span style="color:#F95050">יש להקליד שם פרטי</span>
                                                    }
                                            </div>

                                            <div class="outerUserDetails">
                                                <span class="titleName">שם משפחה:</span>
                                                <div class="nameInputAndCounterWrap">
                                                    <input class="catTitle" type="text" @bind="@userLastName" maxlength="18" @oninput="userLnameLengthCounter" />
                                                    <div class="counter">
                                                        @if (userLastName.Length > 0 && userLastName.Length < 19)
                                                        {
                                                            <span>@userLastName.Length/18</span>
                                                        }
                                                        else if (userLastName.Length <= 0)
                                                        {
                                                            <span>0/18</span>
                                                        }
                                                    </div>
                                                </div>
                                                @if ((newUser.lastName == null || newUser.lastName == "") & isEmpty)
                                                {
                                                    <span style="color:#F95050">יש להקליד שם משפחה</span>
                                                }
                                            </div>


                                            <div class="keyBoardAndBtn">
                                                <span class="titleName">אייקון הפרופיל שלי</span>
                                                <div class="outerEmojiBtnAndKeyboard">
                                                    <div class="outerCancleAndEmoji">
                                                        @if (isCancleBtnClicked)
                                                        {
                                                            <button @onclick="ToggleKeyboard" id="emoji-trigger"><img src="./css/images/add emoji (1).svg" /></button>
                                                        }
                                                        else
                                                        {
                                                            <button @onclick="ToggleKeyboard" id="emoji-trigger" class="@hideBtn"><img src="./css/images/add emoji (1).svg" /></button>
                                                        }
                                                        @if (noEmojiBtn)
                                                        {

                                                            <div class="outerCancleAndEmoji">
                                                                <button @onclick="deleteSelectedEmoji" class="cancleEmoji">ביטול בחירה</button>
                                                                <button @onclick="ToggleKeyboard" class="selectedEmoji">
                                                                    <span class="emoji">@newUser.profilePicOrIcon</span>
                                                                    <img src="./css/images/plus icon.svg" class="plusIcon" />
                                                                </button>
                                                            </div>

                                                        }
                                                    </div>

                                                    <div class="outerEmojiKeyboard">
                                                        <div class="emoji-keyboard @visibilityClass">
                                                            <div class="emoji-categories">
                                                                @foreach (var category in emojiCategories.Keys)
                                                                {
                                                                    <button class="category-button @(selectedCategory == category ? "active" : "")"
                                                            @onclick="() => SelectCategory(category)">
                                                                        @category
                                                                    </button>
                                                                }
                                                            </div>
                                                            <div class="emoji-section">
                                                                @foreach (var emoji in emojiCategories[selectedCategory])
                                                                {
                                                                    <span @onclick="() => SelectEmoji(emoji)" class="emoji">@emoji</span>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                
                                            </div>

                                            @if ((newUser.profilePicOrIcon == null || newUser.profilePicOrIcon == "") & isEmpty)
                                                    {
                                                        <span style="color:#F95050">יש לבחור אייקון</span>
                                                    }

                                        </div>
                                        <div class="megaOuterDaysOptions">
                                            <div class="outerDaysTitleAndPoly">
                                                <div class="titleName">יום תחילת תזרים:</div>
                                            </div>
                                            <div class="outerDaysOptions" @onclick="openDate">


                                                @if (newUser.monthStartDate != null && newUser.monthStartDate != 0)
                                                {
                                                    Console.WriteLine(newUser.monthStartDate);
                                                    <div class="dropDownTitle">
                                                        ה- @newUser.monthStartDate לחודש
                                                        <span class="accordionPoly"><img src="./css/images/arrow3.svg" /></span>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="dropDownTitle" style="color:#727272">
                                                        בחירת יום..
                                                        <span class="accordionPoly"><img src="./css/images/arrow3.svg" /></span>
                                                    </div>
                                                }

                                                @if (openDaysOptions)
                                                {
                                                    
                                                    <div class="outerMonthDayOptions">
                                                        <button class="dropDownOptionBtn" @onclick="@(()=>newUser.monthStartDate=1)">ה-1 לחודש</button>
                                                        <div class="daydivider"></div>
                                                        <button class="dropDownOptionBtn" @onclick="@(()=>newUser.monthStartDate=2)">ה-2 לחודש</button>
                                                        <div class="daydivider"></div>
                                                        <button class="dropDownOptionBtn" @onclick="@(()=>newUser.monthStartDate=10)">ה-10 לחודש</button>
                                                        <div class="daydivider"></div>
                                                        <button class="dropDownOptionBtn" @onclick="@(()=>newUser.monthStartDate=15)">ה-15 לחודש</button>
                                                    </div>
                                                }

                                                @if (newUser.monthStartDate <= 0 & isEmpty)
                                                {
                                                    <div style="color:#F95050">יש לבחור תאריך תחילת תזרים</div>
                                                }

                                            </div>
                                        </div>
                                        <div style="display: flex;
    flex-direction: column-reverse;
    row-gap: 1vh;">
                                            @if (newUser.monthStartDate <= 0 || newUser.profilePicOrIcon == null || newUser.profilePicOrIcon == "" || newUser.firstName == null || newUser.firstName == "" || newUser.lastName == null || newUser.lastName == "")
                                            {

                                                <button class="primery-button" @onclick="checkWhatEmpty">הבא</button>

                                                @*<span style="display: flex;
    align-items: center;
    justify-content: center;">


                                                    @if (newUser.monthStartDate <= 0 & isEmpty)
                                                    {
                                                        <span style="color:#F95050">יש לבחור תאריך תחילת תזרים</span>
                                                    }
                                                    else if ((newUser.profilePicOrIcon == null || newUser.profilePicOrIcon == "") & isEmpty)
                                                    {
                                                        <span style="color:#F95050">יש לבחור אייקון</span>
                                                    }
                                                    else if ((newUser.firstName == null || newUser.firstName == "") & isEmpty)
                                                    {
                                                        <span style="color:#F95050">יש לבחור שם פרטי</span>
                                                    }
                                                    if((newUser.lastName == null || newUser.lastName == "") & isEmpty)
                                                    {
                                                        <span style="color:#F95050">יש לבחור שם משפחה</span>
                                                    }
                                                </span>*@

                                            }
                                            else
                                            {
                                                @*<button class="primery-button" @onclick="@(async () => await createNewUser())">שמירה                                </button>*@
                                                <button class="primery-button" @onclick="toPrefPage">הבא</button>
                                            }

                                        </div>

                                    </div>
                            <div class="registerOverlay">
                                <div class="registerPaddingDiv">

                                    
                                </div>
                            </div>
                        </div>
                    </div>
                }

                else
                {

                    <div class="outerPrefPage">
                        <div class="outerText">
                            <div style="font-weight: 600;
    font-size: 1.2rem;">
                                הקטגוריות שלי
                            </div>
                            <div>זה המקום לבחור את הקטגוריות הרלוונטיות לך, </div>
                            <div>תמיד אפשר לערוך אותן בהמשך 😊</div>
                        </div>
                        <div class="outerCatsOptions">


                            <div class="iconAndText" @onclick='() => ToggleCategory("אוכל", "🍰", "#6775F4")'>
                                <div class="catIcon @cat1Chosen">
                                    🍰
                                </div>
                                <span style="font-weight: 600;
    font-size: 0.9rem;
    text-align: center;">אוכל</span>
                            </div>



                            <div class="iconAndText" @onclick='() => ToggleCategory("דיור", "🏠", "#6775F4")'>
                                <div class="catIcon @cat2Chosen">
                                    🏠
                                </div>
                                <span style="font-weight: 600;
    font-size: 0.9rem;
    text-align: center;">דיור</span>

                            </div>

                            <div class="iconAndText" @onclick='() => ToggleCategory("חשבונות", "📄", "#6775F4")'>
                                <div class="catIcon @cat3Chosen">
                                    📄
                                </div>
                                <span style="font-weight: 600;
    font-size: 0.9rem;
    text-align: center;">חשבונות</span>

                            </div>

                            <div class="iconAndText" @onclick='() => ToggleCategory("רכב", "🚗", "#6775F4")'>
                                <div class="catIcon  @cat4Chosen">
                                    🚗
                                </div>
                                <span style="font-weight: 600;
    font-size: 0.9rem;
    text-align: center;">רכב</span>

                            </div>

                            <div class="iconAndText" @onclick='() => ToggleCategory("תקשורת", "📱", "#6775F4")'>
                                <div class="catIcon @cat6Chosen">
                                    📱
                                </div>
                                <span style="font-weight: 600;
    font-size: 0.9rem;
    text-align: center;">תקשורת</span>

                            </div>

                            <div class="iconAndText" @onclick='() => ToggleCategory("טיפוח", "💅", "#6775F4")'>
                                <div class="catIcon @cat7Chosen">
                                    💅
                                </div>
                                <span style="font-weight: 600;
    font-size: 0.9rem;
    text-align: center;">טיפוח</span>

                            </div>

                            <div class="iconAndText" @onclick='() => ToggleCategory("בילוי", "🎉", "#6775F4")'>
                                <div class="catIcon @cat8Chosen">
                                    🎉
                                </div>
                                <span style="font-weight: 600;
    font-size: 0.9rem;
    text-align: center;">בילוי</span>

                            </div>

                            <div class="iconAndText" @onclick='() => ToggleCategory("ילדים", "👶", "#6775F4")'>
                                <div class="catIcon @cat9Chosen">
                                    👶
                                </div>
                                <span style="font-weight: 600;
    font-size: 0.9rem;
    text-align: center;">ילדים</span>

                            </div>

                            <div class="iconAndText" @onclick='() => ToggleCategory("ביטוח", "📜", "#6775F4")'>
                                <div class="catIcon @cat5Chosen">
                                    📜
                                </div>
                                <span style="font-weight: 600;
    font-size: 0.9rem;
    text-align: center;">ביטוח</span>

                            </div>

                            <div class="iconAndText" @onclick='() => ToggleCategory("הפקדה לחסכון", "💰", "#6775F4")'>
                                <div class="catIcon @cat10Chosen">
                                    💰
                                </div>
                                <span style="font-weight: 600;
    font-size: 0.9rem;
    text-align: center;">הפקדה לחסכון</span>

                            </div>

                            <div class="iconAndText" @onclick='() => ToggleCategory("מזומן", "💸", "#6775F4")'>
                                <div class="catIcon @cat11Chosen">
                                    💸
                                </div>
                                <span style="font-weight: 600;
    font-size: 0.9rem;
    text-align: center;">מזומן</span>

                            </div>

                            <div class="iconAndText" @onclick='() => ToggleCategory("שונות", "🔧", "#6775F4")'>
                                <div class="catIcon @cat12Chosen">
                                    🔧
                                </div>
                                <span style="font-weight: 600;
    font-size: 0.9rem;
    text-align: center;">שונות</span>

                            </div>



                        </div>
                        <div>
                            @if (defualtCategoriesList.Count > 0)
                            {
                                <button class="primery-button" @onclick="@(async () => await createNewUser())">שמירה                                </button>
                            }
                            else
                            {
                                <button class="primery-button" style="opacity:0.6">שמירה                                </button>
                            }
                        </div>

                    </div>
                }

            }

         
            @* <button class="btn btn-primary" @onclick="logout">התנתקות</button>*@
        }

    </Authorized>

    <NotAuthorized>

        <div id="body" style="background-color:#6775F4;">
            <div>
                <div class="col-md-6 col-md-offset-2 loginWrapperDiv">
                    <section class="loginWrapper">
                        <h3 style="font-family: 'Heebo', sans-serif; font-weight: 600; color:#F9F9F9;"> כאן מתחילים!</h3>
                        <img src="./css/images/logo-new.svg" />
                        <a href="api/google/login" class="btn btn-primary" id="google_login_btn">
                            <div class="loginBtnWrapper">
                                התחברות באמצעות <img src="./images/google.svg" />
                            </div>
                        </a>
                    </section>
                </div>
            </div>
        </div>

    </NotAuthorized>
</AuthorizeView>

<style>


    #body {
        direction: rtl;
        display: flex;
        flex-direction: column;
        justify-content: center;
        background-color: #6775F4;
        padding: 10rem;
        /*  z-index: 5;
                         position:relative;*/
    }


    .loginWrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
        row-gap: 6vh;
    }

    .container {
        height: 100%;
        color: #6775F4;
        background-color: #6775F4;
        border: none;
    }

    footer {
        display: none;
    }

    a {
        text-decoration: none;
        color: #6775F4;
    }

    h3 {
        font-family: 'Heebo', sans-serif;
        font-weight: 600;
        color: white;
        text-align: center;
        font-size: 2.5rem;
    }

    #google_login_btn {
        border-radius: 0.25rem;
        background: #F9F9F9;
        background-image: url('.../Client/wwwroot/css/images/present.svg');
        height: 3.5rem;
        width: 15rem;
        flex-shrink: 0;
        color: #030942;
        text-align: center;
        font-family: Heebo;
        font-size: 1.2rem;
        font-style: normal;
        font-weight: 500;
        line-height: normal;
        border: none;
        display: flex;
        flex-direction: row;
        justify-content: space-evenly;
        align-items: center;
    }

    header {
        display: none;
    }

    .loginWrapperDiv {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 14vh;
    }

    .loginBtnWrapper {
        width: 100%;
        display: flex;
        justify-content: space-around;
    }

</style>


@*<a class="" href="./Users">דף רק למשתמשים</a>*@
@code {

    [Inject]
    public IAuthenticationService _Auth { get; set; }

    [CascadingParameter]
    private UserDTO user { get; set; }

    UserToAdd newUser = new UserToAdd();
    CategoryToShow defaultCategory = new CategoryToShow();
    List<CategoryToAdd> defualtCategoriesList = new List<CategoryToAdd>();

    bool isUserSignUp = false;
    bool signUpForm = false;
    bool isCancleBtnClicked = false;
    bool noEmojiBtn = false;
    bool openDaysOptions = false;
    bool isOnInitializedOver = false;
    private bool isVisible = false;

    string hideBtn = "";
    string msg = "";
    private string visibilityClass => isVisible ? "visible" : "removeKeybord";
    private string selectedCategory = "כללי";

    string bgColor = "";
    bool isPrefrences = false;

    string userFirstName = "";
    string userLastName = "";
    bool cat1Selected = false;
    bool cat2Selected = false;
    bool cat3Selected = false;
    bool cat4Selected = false;
    bool cat5Selected = false;
    bool cat6Selected = false;
    bool cat7Selected = false;
    bool cat8Selected = false;
    bool cat9Selected = false;
    bool cat10Selected = false;
    bool cat11Selected = false;
    bool cat12Selected = false;
    bool isEmpty = false;
    public string cat1Chosen => cat1Selected ? "chosen" : "";
    public string cat2Chosen => cat2Selected ? "chosen" : "";
    public string cat3Chosen => cat3Selected ? "chosen" : "";
    public string cat4Chosen => cat4Selected ? "chosen" : "";
    public string cat5Chosen => cat5Selected ? "chosen" : "";
    public string cat6Chosen => cat6Selected ? "chosen" : "";
    public string cat7Chosen => cat7Selected ? "chosen" : "";
    public string cat8Chosen => cat8Selected ? "chosen" : "";
    public string cat9Chosen => cat9Selected ? "chosen" : "";
    public string cat10Chosen => cat10Selected ? "chosen" : "";
    public string cat11Chosen => cat11Selected ? "chosen" : "";
    public string cat12Chosen => cat12Selected ? "chosen" : "";




    async Task logout()
    {
        await _Auth.Logout();
    }

    protected override async Task OnInitializedAsync()
    {
        await checkIfNewUser();
    }

    public async Task checkIfNewUser()
    {
        if (user != null)
        {
            var check = await Http.GetAsync("api/Present/checkUserMonthDate/" + user.Id);

            if (!check.IsSuccessStatusCode)
            {
                signUpForm = true;
            }
            else
            {
                Nav.NavigateTo("./HomePage");
            }
            isUserSignUp = true;
        }


    }

    private void ToggleKeyboard()
    {
        isVisible = !isVisible;
    }

    private void deleteSelectedEmoji()
    {
        isCancleBtnClicked = true;
        noEmojiBtn = false;
        newUser.profilePicOrIcon = "";
        hideBtn = "";
    }
    private Dictionary<string, List<string>>
    emojiCategories = new Dictionary<string, List<string>>
                                                                            {
    {"כללי", new List<string> {
    "🏠", "🛏️", "🚿", "💡", "📞", "🖥️", "🚗", "🚌", "🛒", "🍲",
    "🏥", "💊", "👕", "🧹", "🧺", "🍼", "🐶", "🧑‍🔧", "📚", "🧾",
    "🕶️", "🌂", "🔑", "📦"
    }},
    {
    "כיף", new List<string> {
    "🎭", "🎟️", "🎮", "🎨", "📸", "🍽️", "🏋️‍♂️", "🧘", "🎸", "✈️",
    "🏕️", "🛍️", "🍷", "🎁", "🎈", "📖", "🍰", "🌐", "🕹️", "🚤",
    "🚵", "🛀", "🎷", "🎙️"
    }},
    {
    "פיננסי", new List<string> {
    "💳",
    "🏦", "💰", "🪙", "💸", "💹",
    "📈", "📉", "📊", "💲", "🏧",
    "🧾", "💱", "💲", "💹", "🏦",
    "🖋️", "💎", "📜", "🏧",
    "📅", "🖥️", "🖨️", "🔍"
    }},
                                                                            };

    private void SelectCategory(string category)
    {
        selectedCategory = category;
    }


    private void SelectEmoji(string emoji)
    {
        //Console.WriteLine($"Emoji selected: {emoji}"); // Replace this with actual logic
        noEmojiBtn = true;
        isCancleBtnClicked = false;
        hideBtn = "hideDefaultEmojiBtn";
        newUser.profilePicOrIcon = emoji;
    }

    private void ToggleCategory(string categoryTitle, string icon, string color)
    {

        var category = defualtCategoriesList.FirstOrDefault(c => c.categroyTitle == categoryTitle);

        if (category != null)
        {

            defualtCategoriesList.Remove(category);
        }
        else
        {

            defualtCategoriesList.Add(new CategoryToAdd
                {
                    userID = user.Id,
                    categroyTitle = categoryTitle,
                    icon = icon,
                    color = color
                });
        }

        if (defualtCategoriesList.Count == 0)
        {
            cat1Selected = false;
            cat2Selected = false;
            cat3Selected = false;
            cat4Selected = false;
            cat5Selected = false;
            cat6Selected = false;
            cat7Selected = false;
            cat8Selected = false;
            cat9Selected = false;
            cat10Selected = false;
            cat11Selected = false;
            cat12Selected = false;
        }
        else
        {
            cat1Selected = false;
            cat2Selected = false;
            cat3Selected = false;
            cat4Selected = false;
            cat5Selected = false;
            cat6Selected = false;
            cat7Selected = false;
            cat8Selected = false;
            cat9Selected = false;
            cat10Selected = false;
            cat11Selected = false;
            cat12Selected = false;


            foreach (CategoryToAdd selectedCat in defualtCategoriesList)
            {
                switch (selectedCat.categroyTitle)
                {
                    case "אוכל":
                        cat1Selected = true;
                        break;
                    case "דיור":
                        cat2Selected = true;
                        break;
                    case "חשבונות":
                        cat3Selected = true;
                        break;
                    case "רכב":
                        cat4Selected = true;
                        break;
                    case "ביטוח":
                        cat5Selected = true;
                        break;
                    case "תקשורת":
                        cat6Selected = true;
                        break;
                    case "טיפוח":
                        cat7Selected = true;
                        break;
                    case "בילוי":
                        cat8Selected = true;
                        break;
                    case "ילדים":
                        cat9Selected = true;
                        break;
                    case "הפקדה לחסכון":
                        cat10Selected = true;
                        break;
                    case "מזומן":
                        cat11Selected = true;
                        break;
                    case "שונות":
                        cat12Selected = true;
                        break;
                }
            }
        }

    }


    public async Task createNewUser()
    {
        if (newUser.profilePicOrIcon == null || newUser.profilePicOrIcon == "")
        {
            newUser.profilePicOrIcon = "🌟";
        }
        var newUserRes = await Http.PostAsJsonAsync("api/Present/AddUser/" + user.Id, newUser);

        if (newUserRes.IsSuccessStatusCode)
        {

            //user.Id = newUserRes.Content.ReadFromJsonAsync<int>().Result;
            UserToAdd newUser = new UserToAdd();
            isOnInitializedOver = false;

            defualtCategoriesList.Add(new CategoryToAdd { userID = user.Id, categroyTitle = "הכנסות", icon = "💵", color = "#6775F4" });
            

            foreach (CategoryToAdd defualtCategory in defualtCategoriesList)
            {
                var defaultCategories = await Http.PostAsJsonAsync("api/Present/AddCategory/" + defualtCategory.userID, defualtCategory);

                if (defaultCategories.IsSuccessStatusCode)
                {

                    defaultCategory = defaultCategories.Content.ReadFromJsonAsync<CategoryToShow>().Result;

                    switch (defaultCategory.categroyTitle)
                    {
                        case "אוכל":

                            List<SubCategoryToAdd> defaultSubCategory1List = new List<SubCategoryToAdd>()
    {
    new SubCategoryToAdd{subCategoryTitle = "סופר", categoryID = defaultCategory.id, monthlyPlannedBudget=1500, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "ירקות", categoryID = defaultCategory.id, monthlyPlannedBudget=1000 ,importance =0},
    new SubCategoryToAdd{subCategoryTitle = "בשר ודגים", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "הזמנת אוכל מבחוץ", categoryID = defaultCategory.id, monthlyPlannedBudget=500, importance =0}
    };

                            foreach (SubCategoryToAdd defaultSubCategory1 in defaultSubCategory1List)
                            {
                                var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory1);

                                if (defaultCategories.IsSuccessStatusCode)
                                {
                                    msg = "ווהוו לא מעניין את מלכית";
                                }
                                else
                                {
                                    msg = "לא ווהו, כן מעניין את מלכית";
                                }
                            }
                            // Code for when number is 1
                            break;
                        case "חשבונות":

                            List<SubCategoryToAdd> defaultSubCategory2List = new List<SubCategoryToAdd>()
    {
    new SubCategoryToAdd{subCategoryTitle = "חשמל", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "מים", categoryID = defaultCategory.id, monthlyPlannedBudget=500, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "גז", categoryID = defaultCategory.id, monthlyPlannedBudget=500, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "ארנונה", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0}};

                            foreach (SubCategoryToAdd defaultSubCategory2 in defaultSubCategory2List)
                            {
                                var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory2);

                                if (defaultCategories.IsSuccessStatusCode)
                                {
                                    msg = "ווהוו לא מעניין את מלכית";
                                }
                                else
                                {
                                    msg = "לא ווהו, כן מעניין את מלכית";
                                }
                            }
                            break;
                        case "שונות":
                            List<SubCategoryToAdd> defaultSubCategory3List = new List<SubCategoryToAdd>()
    {
    new SubCategoryToAdd{subCategoryTitle = "טיפול נפשי", categoryID = defaultCategory.id, monthlyPlannedBudget=1500, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "רפואה פרטית", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "תרופות", categoryID = defaultCategory.id, monthlyPlannedBudget=500, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "מנוי פיס", categoryID = defaultCategory.id, monthlyPlannedBudget=120, importance =0},
    };

                            foreach (SubCategoryToAdd defaultSubCategory3 in defaultSubCategory3List)
                            {
                                var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory3);

                                if (defaultCategories.IsSuccessStatusCode)
                                {
                                    msg = "ווהוו לא מעניין את מלכית";
                                }
                                else
                                {
                                    msg = "לא ווהו, כן מעניין את מלכית";
                                }
                            }
                            break;
                        case "הפקדה לחסכון":
                            List<SubCategoryToAdd> defaultSubCategory4List = new List<SubCategoryToAdd>()
    {
    new SubCategoryToAdd{subCategoryTitle = "פיקדון בבנק", categoryID = defaultCategory.id, monthlyPlannedBudget=1500, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "השקעות בבורסה", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0},
    };

                            foreach (SubCategoryToAdd defaultSubCategory4 in defaultSubCategory4List)
                            {
                                var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory4);

                                if (defaultCategories.IsSuccessStatusCode)
                                {
                                    msg = "ווהוו לא מעניין את מלכית";
                                }
                                else
                                {
                                    msg = "לא ווהו, כן מעניין את מלכית";
                                }
                            }
                            break;
                        case "הכנסות":
                            List<SubCategoryToAdd> defaultSubCategory5List = new List<SubCategoryToAdd>()
    {
    new SubCategoryToAdd{subCategoryTitle = "משכורת 1", categoryID = defaultCategory.id},
    new SubCategoryToAdd{subCategoryTitle = "משכורת 2", categoryID = defaultCategory.id},
    new SubCategoryToAdd{subCategoryTitle = "קצבה", categoryID = defaultCategory.id},
    new SubCategoryToAdd{subCategoryTitle = "ביטוח לאומי", categoryID = defaultCategory.id},
    new SubCategoryToAdd{subCategoryTitle = "הכנסות מנכס", categoryID = defaultCategory.id},
    new SubCategoryToAdd{subCategoryTitle = "הכנסות מעסק", categoryID = defaultCategory.id},
    new SubCategoryToAdd{subCategoryTitle = "עזרה מהמשפחה", categoryID = defaultCategory.id},
    new SubCategoryToAdd{subCategoryTitle = "הכנסות נוספות", categoryID = defaultCategory.id},
    };

                            foreach (SubCategoryToAdd defaultSubCategory5 in defaultSubCategory5List)
                            {
                                var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory5);

                                if (defaultCategories.IsSuccessStatusCode)
                                {
                                    msg = "ווהוו לא מעניין את מלכית";
                                }
                                else
                                {
                                    msg = "לא ווהו, כן מעניין את מלכית";
                                }
                            }
                            break;
                        case "ילדים":
                            List<SubCategoryToAdd> defaultSubCategory6List = new List<SubCategoryToAdd>()
    {
    new SubCategoryToAdd{subCategoryTitle = "גן", categoryID = defaultCategory.id, monthlyPlannedBudget=3000, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "צהרון", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "תשלומי הורים", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "חוג 1", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "חוג 2", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "דמי כיס", categoryID = defaultCategory.id, monthlyPlannedBudget=400, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "תנועת נוער", categoryID = defaultCategory.id, monthlyPlannedBudget=200, importance =0}
    };

                            foreach (SubCategoryToAdd defaultSubCategory6 in defaultSubCategory6List)
                            {
                                var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory6);

                                if (defaultCategories.IsSuccessStatusCode)
                                {
                                    msg = "ווהוו לא מעניין את מלכית";
                                }
                                else
                                {
                                    msg = "לא ווהו, כן מעניין את מלכית";
                                }
                            }
                            break;
                        case "ביטוח":
                            List<SubCategoryToAdd> defaultSubCategory7List = new List<SubCategoryToAdd>()
    {
    new SubCategoryToAdd{subCategoryTitle = "קופת חולים", categoryID = defaultCategory.id, monthlyPlannedBudget=400, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "ביטוח בריאות פרטי", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "ביטוח תכולה", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "ביטוח חיים", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0}
    };

                            foreach (SubCategoryToAdd defaultSubCategory7 in defaultSubCategory7List)
                            {
                                var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory7);

                                if (defaultCategories.IsSuccessStatusCode)
                                {
                                    msg = "ווהוו לא מעניין את מלכית";
                                }
                                else
                                {
                                    msg = "לא ווהו, כן מעניין את מלכית";
                                }
                            }
                            break;
                        case "בילוי":
                            List<SubCategoryToAdd> defaultSubCategory8List = new List<SubCategoryToAdd>()
    {
    new SubCategoryToAdd{subCategoryTitle = "מסעדות", categoryID = defaultCategory.id, monthlyPlannedBudget=1500, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "בתי קפה", categoryID = defaultCategory.id, monthlyPlannedBudget=500, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "הצגות והופעות", categoryID = defaultCategory.id, monthlyPlannedBudget=500, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "סרטים", categoryID = defaultCategory.id, monthlyPlannedBudget=500, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "טיולים", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "חופשות", categoryID = defaultCategory.id, monthlyPlannedBudget=3000, importance =0}
    };

                            foreach (SubCategoryToAdd defaultSubCategory8 in defaultSubCategory8List)
                            {
                                var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory8);

                                if (defaultCategories.IsSuccessStatusCode)
                                {
                                    msg = "ווהוו לא מעניין את מלכית";
                                }
                                else
                                {
                                    msg = "לא ווהו, כן מעניין את מלכית";
                                }
                            }
                            break;

                        case "דיור":
                            List<SubCategoryToAdd> defaultSubCategory9List = new List<SubCategoryToAdd>()
    {
    new SubCategoryToAdd{subCategoryTitle = "משכנתא", categoryID = defaultCategory.id, monthlyPlannedBudget=400, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "שכר דירה", categoryID = defaultCategory.id, monthlyPlannedBudget=4000, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "ועד בית", categoryID = defaultCategory.id, monthlyPlannedBudget=200, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "גינון", categoryID = defaultCategory.id, monthlyPlannedBudget=500, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "שירותי ניקיון", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "רכישות לבית", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0}
    };

                            foreach (SubCategoryToAdd defaultSubCategory9 in defaultSubCategory9List)
                            {
                                var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory9);

                                if (defaultCategories.IsSuccessStatusCode)
                                {
                                    msg = "ווהוו לא מעניין את מלכית";
                                }
                                else
                                {
                                    msg = "לא ווהו, כן מעניין את מלכית";
                                }
                            }
                            break;

                        case "רכב":
                            List<SubCategoryToAdd> defaultSubCategory10List = new List<SubCategoryToAdd>()
    {
    new SubCategoryToAdd{subCategoryTitle = "דלק", categoryID = defaultCategory.id, monthlyPlannedBudget=1500, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "חניה", categoryID = defaultCategory.id, monthlyPlannedBudget=500, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "כבישי אגרה", categoryID = defaultCategory.id, monthlyPlannedBudget=200, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "ביטוחים", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "טסט וטיפולים", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0}};

                            foreach (SubCategoryToAdd defaultSubCategory10 in defaultSubCategory10List)
                            {
                                var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory10);

                                if (defaultCategories.IsSuccessStatusCode)
                                {
                                    msg = "ווהוו לא מעניין את מלכית";
                                }
                                else
                                {
                                    msg = "לא ווהו, כן מעניין את מלכית";
                                }
                            }
                            break;

                        case "תקשורת":
                            List<SubCategoryToAdd> defaultSubCategory11List = new List<SubCategoryToAdd>()
    {
    new SubCategoryToAdd{subCategoryTitle = "אינטרנט", categoryID = defaultCategory.id, monthlyPlannedBudget=300, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "טלפון", categoryID = defaultCategory.id, monthlyPlannedBudget=300, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "תיקונים", categoryID = defaultCategory.id, monthlyPlannedBudget=500, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "טלוויזיה", categoryID = defaultCategory.id, monthlyPlannedBudget=300, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "אפליקציות", categoryID = defaultCategory.id, monthlyPlannedBudget=200, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "שירותי סטרימינג", categoryID = defaultCategory.id, monthlyPlannedBudget=200}};

                            foreach (SubCategoryToAdd defaultSubCategory11 in defaultSubCategory11List)
                            {
                                var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory11);

                                if (defaultCategories.IsSuccessStatusCode)
                                {
                                    msg = "ווהוו לא מעניין את מלכית";
                                }
                                else
                                {
                                    msg = "לא ווהו, כן מעניין את מלכית";
                                }
                            }
                            break;

                        case "טיפוח":
                            List<SubCategoryToAdd> defaultSubCategory12List = new List<SubCategoryToAdd>()
    {
    new SubCategoryToAdd{subCategoryTitle = "מספרה", categoryID = defaultCategory.id, monthlyPlannedBudget=1000, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "קוסמטיקה", categoryID = defaultCategory.id, monthlyPlannedBudget=400, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "ציפורניים", categoryID = defaultCategory.id, monthlyPlannedBudget=200, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "טיפולים", categoryID = defaultCategory.id, monthlyPlannedBudget=500, importance =0},
    new SubCategoryToAdd{subCategoryTitle = "פארם", categoryID = defaultCategory.id, monthlyPlannedBudget=500, importance =0}};

                            foreach (SubCategoryToAdd defaultSubCategory12 in defaultSubCategory12List)
                            {
                                var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory12);

                                if (defaultCategories.IsSuccessStatusCode)
                                {
                                    msg = "ווהוו לא מעניין את מלכית";
                                }
                                else
                                {
                                    msg = "לא ווהו, כן מעניין את מלכית";
                                }
                            }
                            break;
                        default:
                            msg = "Error creating new sub category";
                            break;
                    }

                    await Task.Delay(1);
                    Nav.NavigateTo("./HomePage");
                }

                else
                {
                    msg = "Error creating new category";
                }
            }

        }
        else
        {
            msg = "Error adding new user";
        }

    }


    private void userFnameLengthCounter(ChangeEventArgs e)
    {
        userFirstName = e.Value.ToString();
        newUser.firstName = e.Value.ToString();
    }

    private void userLnameLengthCounter(ChangeEventArgs e)
    {
        userLastName = e.Value.ToString();
        newUser.lastName = e.Value.ToString();
    }

    private TutorialOverlay tutorialOverlay;
    private string targetElementId = "";


    void toPrefPage()
    {
        isPrefrences = true;
    }


    void checkWhatEmpty()
    {
        isEmpty = true;
    }

    void openDate()
    {
        isVisible = false;
        openDaysOptions =!openDaysOptions;

    }


    //private async Task StartTutorial()
    //{
    //    var elementBounds = await JSRuntime.InvokeAsync<ElementBounds>("getElementPosition", "tutorialBtn");
    //    tutorialOverlay.ShowHighlight((int)elementBounds.Left, (int)elementBounds.Top, (int)elementBounds.Width, (int)elementBounds.Height);
    //}
}

