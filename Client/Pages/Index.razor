@page "/"
@inject HttpClient Http
@inject NavigationManager Nav
@using BlazorGoogleLogin.Shared.Models.present.toShow
@using BlazorGoogleLogin.Shared.Models.present.toAdd
@using BlazorGoogleLogin.Shared.Models.present.toEdit
@using BlazorGoogleLogin.Client.Components
@using Microsoft.AspNetCore.Components.Web
@inject DateService DateService
@inject IJSRuntime JSRuntime
@*@implements IDisposable*@



<AuthorizeView>
    <Authorized>
        @if (user != null)
        {

            if (signUpForm)
            {


                <div class="megaOuterLay">
                    <div class="registerOuterLay">
                        <div class="registerBgOverlay"> </div>
                        <div class="outerLogoAndOpeningText">
                            <img src="./css/images/light logo small.svg" />
                            <div>
                                <div>
                                    אפליקציה לניהול תקציב מבית איה תמרי
                                </div>
                                <div>
                                    אנחנו כאן ללוות אותך בדרך לניהול תקציב נכון
                                </div>
                            </div>
                        </div>
                        <div class="registerOverlay">
                            <div class="registerPaddingDiv">

                                <div class="outerRegisterInfo">
                                    <div class="firstLastAndEmoji">
                                        <div class="outerUserDetails">
                                            <span class="titleName">שם פרטי:</span>
                                            <div class="nameInputAndCounterWrap">
                                                <input class="catTitle" type="text" @bind="@userFirstName" @oninput="userFnameLengthCounter" maxlength="15" />
                                                <div class="counter">
                                                    @if (userFirstName.Length > 0 && userFirstName.Length < 16)
                                                    {
                                                        <span>@userFirstName.Length/15</span>
                                                    }
                                                    else if (userFirstName.Length <= 0)
                                                    {
                                                        <span>0/15</span>
                                                    }
                                                </div>
                                            </div>

                                        </div>

                                        <div class="outerUserDetails">
                                            <span class="titleName">שם משפחה:</span>
                                            <div class="nameInputAndCounterWrap">
                                                <input class="catTitle" type="text" @bind="@userLastName" maxlength="18" @oninput="userLnameLengthCounter" />
                                                <div class="counter">
                                                    @if (userLastName.Length > 0 && userLastName.Length < 19)
                                                    {
                                                        <span>@userLastName.Length/18</span>
                                                    }
                                                    else if (userLastName.Length <= 0)
                                                    {
                                                        <span>0/18</span>
                                                    }
                                                </div>
                                            </div>
                                        </div>


                                        <div class="keyBoardAndBtn">
                                            <span class="titleName">אייקון הפרופיל שלי</span>
                                            <div class="outerEmojiBtnAndKeyboard">
                                                <div class="outerCancleAndEmoji">
                                                    @if (isCancleBtnClicked)
                                                    {
                                                        <button @onclick="ToggleKeyboard" id="emoji-trigger"><img src="./css/images/add emoji (1).svg" /></button>
                                                    }
                                                    else
                                                    {
                                                        <button @onclick="ToggleKeyboard" id="emoji-trigger" class="@hideBtn"><img src="./css/images/add emoji (1).svg" /></button>
                                                    }
                                                    @if (noEmojiBtn)
                                                    {

                                                        <div class="outerCancleAndEmoji">
                                                            <button @onclick="deleteSelectedEmoji" class="cancleEmoji">ביטול בחירה</button>
                                                            <button @onclick="ToggleKeyboard" class="selectedEmoji">
                                                                <span class="emoji">@newUser.profilePicOrIcon</span>
                                                                <img src="./css/images/plus icon.svg" class="plusIcon" />
                                                            </button>
                                                        </div>

                                                    }
                                                </div>

                                                <div class="outerEmojiKeyboard">
                                                    <div class="emoji-keyboard @visibilityClass">
                                                        <div class="emoji-categories">
                                                            @foreach (var category in emojiCategories.Keys)
                                                            {
                                                                <button class="category-button @(selectedCategory == category ? "active" : "")"
                                                            @onclick="() => SelectCategory(category)">
                                                                    @category
                                                                </button>
                                                            }
                                                        </div>
                                                        <div class="emoji-section">
                                                            @foreach (var emoji in emojiCategories[selectedCategory])
                                                            {
                                                                <span @onclick="() => SelectEmoji(emoji)" class="emoji">@emoji</span>
                                                            }
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>


                                    </div>
                                    <div class="megaOuterDaysOptions">
                                        <div class="outerDaysTitleAndPoly">
                                            <div class="titleName">יום תחילת תזרים:</div>
                                        </div>
                                        <div class="outerDaysOptions" @onclick="()=>openDaysOptions =! openDaysOptions">


                                            @if (newUser.monthStartDate != null && newUser.monthStartDate != 0)
                                            {
                                                Console.WriteLine(newUser.monthStartDate);
                                                <div class="dropDownTitle">
                                                    ה- @newUser.monthStartDate לחודש
                                                    <span class="accordionPoly"><img src="./css/images/arrow3.svg" /></span>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="dropDownTitle" style="color:#727272">
                                                    בחירת יום..
                                                    <span class="accordionPoly"><img src="./css/images/arrow3.svg" /></span>
                                                </div>
                                            }

                                            @if (openDaysOptions)
                                            {
                                                <div class="outerMonthDayOptions">
                                                    <button class="dropDownOptionBtn" @onclick="@(()=>newUser.monthStartDate=1)">ה-1 לחודש</button>
                                                    <div class="daydivider"></div>
                                                    <button class="dropDownOptionBtn" @onclick="@(()=>newUser.monthStartDate=2)">ה-2 לחודש</button>
                                                    <div class="daydivider"></div>
                                                    <button class="dropDownOptionBtn" @onclick="@(()=>newUser.monthStartDate=10)">ה-10 לחודש</button>
                                                    <div class="daydivider"></div>
                                                    <button class="dropDownOptionBtn" @onclick="@(()=>newUser.monthStartDate=15)">ה-15 לחודש</button>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    <div>
                                        @if (newUser.monthStartDate <= 0 || newUser.profilePicOrIcon == null || newUser.profilePicOrIcon == "" || newUser.firstName == null || newUser.firstName == "" || newUser.lastName == null || newUser.lastName == "")
                                        {

                                            <button class="primery-button" disabled style="opacity:60%;">שמירה                                </button>
                                            <span>


                                                @if (newUser.monthStartDate <= 0)
                                                {
                                                    <span>יש לבחור תאריך תחילת תזרים</span>
                                                }
                                                else if (newUser.profilePicOrIcon == null || newUser.profilePicOrIcon == "")
                                                {
                                                    <span>יש לבחור אייקון</span>
                                                }
                                                else if (newUser.firstName == null || newUser.firstName == "")
                                                {
                                                    <span>יש לבחור שם פרטי</span>
                                                }
                                                else
                                                {
                                                    <span>יש לבחור שם משפחה</span>
                                                }
                                            </span>
                                        }


                                        }
                                        else
                                        {
                                        <button class="primery-button" @onclick="@(async () => await createNewUser())">שמירה                                </button>
                                        }

                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }

            @* <button class="btn btn-primary" @onclick="logout">התנתקות</button>*@
        }

    </Authorized>

    <NotAuthorized>

        <div id="body" style="background-color:#6775F4;">
            <div>
                <div class="col-md-6 col-md-offset-2 loginWrapperDiv">
                    <section class="loginWrapper">
                        <h3 style="font-family: 'Heebo', sans-serif; font-weight: 600; color:#F9F9F9;"> כאן מתחילים!</h3>
                        <img src="./css/images/logo-new.svg" />
                        <a href="api/google/login" class="btn btn-primary" id="google_login_btn">
                            <div class="loginBtnWrapper">
                                התחברות באמצעות <img src="./images/google.svg" />
                            </div>
                        </a>
                    </section>
                </div>
            </div>
        </div>

    </NotAuthorized>
</AuthorizeView>

<style>


    #body {
        direction: rtl;
        display: flex;
        flex-direction: column;
        justify-content: center;
        background-color: #6775F4;
        padding: 10rem;
        /*  z-index: 5;
                                position:relative;*/
    }


    .loginWrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
        row-gap: 6vh;
    }

    .container {
        height: 100%;
        color: #6775F4;
        background-color: #6775F4;
        border: none;
    }

    footer {
        display: none;
    }

    a {
        text-decoration: none;
        color: #6775F4;
    }

    h3 {
        font-family: 'Heebo', sans-serif;
        font-weight: 600;
        color: white;
        text-align: center;
        font-size: 2.5rem;
    }

    #google_login_btn {
        border-radius: 0.25rem;
        background: #F9F9F9;
        background-image: url('.../Client/wwwroot/css/images/present.svg');
        height: 3.5rem;
        width: 15rem;
        flex-shrink: 0;
        color: #030942;
        text-align: center;
        font-family: Heebo;
        font-size: 1.2rem;
        font-style: normal;
        font-weight: 500;
        line-height: normal;
        border: none;
        display: flex;
        flex-direction: row;
        justify-content: space-evenly;
        align-items: center;
    }

    header {
        display: none;
    }

    .loginWrapperDiv {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 14vh;
    }

    .loginBtnWrapper {
        width: 100%;
        display: flex;
        justify-content: space-around;
    }

</style>


@*<a class="" href="./Users">דף רק למשתמשים</a>*@
@code {

    [Inject]
    public IAuthenticationService _Auth { get; set; }

    [CascadingParameter]
    private UserDTO user { get; set; }

    UserToAdd newUser = new UserToAdd();
    CategoryToShow defaultCategory = new CategoryToShow();

    bool isUserSignUp = false;
    bool signUpForm = false;
    bool isCancleBtnClicked = false;
    bool noEmojiBtn = false;
    bool openDaysOptions = false;
    bool isOnInitializedOver = false;
    private bool isVisible = false;

    string hideBtn = "";
    string msg = "";
    private string visibilityClass => isVisible ? "visible" : "removeKeybord";
    private string selectedCategory = "כללי";

    string bgColor = "";

    string userFirstName = "";
    string userLastName = "";

    async Task logout()
    {
        await _Auth.Logout();
    }

    protected override async Task OnInitializedAsync()
    {
        await checkIfNewUser();
    }

    public async Task checkIfNewUser()
    {
        if (user != null)
        {
            var check = await Http.GetAsync("api/Present/checkUserMonthDate/" + user.Id);

            if (!check.IsSuccessStatusCode)
            {
                signUpForm = true;
            }
            else
            {
                Nav.NavigateTo("./HomePage");
            }
            isUserSignUp = true;
        }


    }

    private void ToggleKeyboard()
    {
        isVisible = !isVisible;
    }

    private void deleteSelectedEmoji()
    {
        isCancleBtnClicked = true;
        noEmojiBtn = false;
        newUser.profilePicOrIcon = "";
        hideBtn = "";
    }
    private Dictionary<string, List<string>>
    emojiCategories = new Dictionary<string, List<string>>
                                            {
    {"כללי", new List<string> {
    "🏠", "🛏️", "🚿", "💡", "📞", "🖥️", "🚗", "🚌", "🛒", "🍲",
    "🏥", "💊", "👕", "🧹", "🧺", "🍼", "🐶", "🧑‍🔧", "📚", "🧾",
    "🕶️", "🌂", "🔑", "📦"
    }},
    {
    "כיף", new List<string> {
    "🎭", "🎟️", "🎮", "🎨", "📸", "🍽️", "🏋️‍♂️", "🧘", "🎸", "✈️",
    "🏕️", "🛍️", "🍷", "🎁", "🎈", "📖", "🍰", "🌐", "🕹️", "🚤",
    "🚵", "🛀", "🎷", "🎙️"
    }},
    {
    "פיננסי", new List<string> {
    "💳",
    "🏦", "💰", "🪙", "💸", "💹",
    "📈", "📉", "📊", "💲", "🏧",
    "🧾", "💱", "💲", "💹", "🏦",
    "🖋️", "💎", "📜", "🏧",
    "📅", "🖥️", "🖨️", "🔍"
    }},
                                            };

    private void SelectCategory(string category)
    {
        selectedCategory = category;
    }


    private void SelectEmoji(string emoji)
    {
        //Console.WriteLine($"Emoji selected: {emoji}"); // Replace this with actual logic
        noEmojiBtn = true;
        isCancleBtnClicked = false;
        hideBtn = "hideDefaultEmojiBtn";
        newUser.profilePicOrIcon = emoji;
    }

    public async Task createNewUser()
    {
        if (newUser.profilePicOrIcon == null || newUser.profilePicOrIcon == "")
        {
            newUser.profilePicOrIcon = "🌟";
        }
        var newUserRes = await Http.PostAsJsonAsync("api/Present/AddUser/" + user.Id, newUser);

        if (newUserRes.IsSuccessStatusCode)
        {

            //user.Id = newUserRes.Content.ReadFromJsonAsync<int>().Result;
            UserToAdd newUser = new UserToAdd();
            isOnInitializedOver = false;

            List<CategoryToAdd> defualtCategoriesList = new List<CategoryToAdd>()
    {
    new CategoryToAdd{userID = user.Id, categroyTitle = "משק בית", icon = "🏠", color = "#6775F4" },
    new CategoryToAdd{userID = user.Id, categroyTitle = "רכב ותחבורה", icon = "🚗", color = "#6775F4" },
    new CategoryToAdd{userID = user.Id, categroyTitle = "בריאות וטיפוח", icon = "💄", color = "#6775F4" },
    new CategoryToAdd{userID = user.Id, categroyTitle = "הכנסות", icon = "💵", color = "#6775F4" }
    };

            foreach (CategoryToAdd defualtCategory in defualtCategoriesList)
            {
                var defaultCategories = await Http.PostAsJsonAsync("api/Present/AddCategory/" + defualtCategory.userID, defualtCategory);

                if (defaultCategories.IsSuccessStatusCode)
                {

                    defaultCategory = defaultCategories.Content.ReadFromJsonAsync<CategoryToShow>().Result;

                    switch (defaultCategory.categroyTitle)
                    {
                        case "משק בית":

                            List<SubCategoryToAdd> defaultSubCategory1List = new List<SubCategoryToAdd>()
    {
    new SubCategoryToAdd{subCategoryTitle = "חשבונות", categoryID = defaultCategory.id, monthlyPlannedBudget=1000},
    new SubCategoryToAdd{subCategoryTitle = "מזון", categoryID = defaultCategory.id, monthlyPlannedBudget=1500}
    };

                            foreach (SubCategoryToAdd defaultSubCategory1 in defaultSubCategory1List)
                            {
                                var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory1);

                                if (defaultCategories.IsSuccessStatusCode)
                                {
                                    msg = "ווהוו לא מעניין את מלכית";
                                }
                                else
                                {
                                    msg = "לא ווהו, כן מעניין את מלכית";
                                }
                            }
                            // Code for when number is 1
                            break;
                        case "רכב ותחבורה":

                            List<SubCategoryToAdd> defaultSubCategory2List = new List<SubCategoryToAdd>()
    {
    new SubCategoryToAdd{subCategoryTitle = "דלק", categoryID = defaultCategory.id, monthlyPlannedBudget=1000},
    new SubCategoryToAdd{subCategoryTitle = "תחבורה ציבורית", categoryID = defaultCategory.id, monthlyPlannedBudget=500}
    };

                            foreach (SubCategoryToAdd defaultSubCategory2 in defaultSubCategory2List)
                            {
                                var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory2);

                                if (defaultCategories.IsSuccessStatusCode)
                                {
                                    msg = "ווהוו לא מעניין את מלכית";
                                }
                                else
                                {
                                    msg = "לא ווהו, כן מעניין את מלכית";
                                }
                            }
                            break;
                        case "בריאות וטיפוח":
                            List<SubCategoryToAdd> defaultSubCategory3List = new List<SubCategoryToAdd>()
    {
    new SubCategoryToAdd{subCategoryTitle = "קופת חולים", categoryID = defaultCategory.id, monthlyPlannedBudget=500},
    new SubCategoryToAdd{subCategoryTitle = "טואלטיקה", categoryID = defaultCategory.id, monthlyPlannedBudget=200}
    };

                            foreach (SubCategoryToAdd defaultSubCategory3 in defaultSubCategory3List)
                            {
                                var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory3);

                                if (defaultCategories.IsSuccessStatusCode)
                                {
                                    msg = "ווהוו לא מעניין את מלכית";
                                }
                                else
                                {
                                    msg = "לא ווהו, כן מעניין את מלכית";
                                }
                            }
                            break;
                        case "הכנסות":
                            List<SubCategoryToAdd> defaultSubCategory4List = new List<SubCategoryToAdd>()
    {
    new SubCategoryToAdd{subCategoryTitle = "משכורת", categoryID = defaultCategory.id}
    };

                            foreach (SubCategoryToAdd defaultSubCategory4 in defaultSubCategory4List)
                            {
                                var defaultSubCategories = await Http.PostAsJsonAsync("api/Present/AddSubCategory/", defaultSubCategory4);

                                if (defaultCategories.IsSuccessStatusCode)
                                {
                                    msg = "ווהוו לא מעניין את מלכית";
                                }
                                else
                                {
                                    msg = "לא ווהו, כן מעניין את מלכית";
                                }
                            }
                            break;

                        default:
                            msg = "Error creating new sub category";
                            break;
                    }

                    await Task.Delay(1);
                    Nav.NavigateTo("./HomePage");
                }

                else
                {
                    msg = "Error creating new category";
                }
            }

        }
        else
        {
            msg = "Error adding new user";
        }

    }


    private void userFnameLengthCounter(ChangeEventArgs e)
    {
        userFirstName = e.Value.ToString();
        newUser.firstName = e.Value.ToString();
    }

    private void userLnameLengthCounter(ChangeEventArgs e)
    {
        userLastName = e.Value.ToString();
        newUser.lastName = e.Value.ToString();
    }

    private TutorialOverlay tutorialOverlay;
    private string targetElementId = "";


    //private async Task StartTutorial()
    //{
    //    var elementBounds = await JSRuntime.InvokeAsync<ElementBounds>("getElementPosition", "tutorialBtn");
    //    tutorialOverlay.ShowHighlight((int)elementBounds.Left, (int)elementBounds.Top, (int)elementBounds.Width, (int)elementBounds.Height);
    //}
}

