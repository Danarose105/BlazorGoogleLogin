@page "/UserSavingsPage"

@inject HttpClient Http
@inject NavigationManager Nav
@using BlazorGoogleLogin.Shared.Models.future.toShow
@using BlazorGoogleLogin.Shared.Models.future.toAdd
@using BlazorGoogleLogin.Shared.Models.future.toEdit
@using BlazorGoogleLogin.Client.Components
@using Microsoft.AspNetCore.Components.Web
@*@inject DateService DateService*@
@inject IJSRuntime JSRuntime

<div class="megaOuterPage">
    <div class="outerPage">
        <div>
            <button @onclick="backToFutureHomePage" class="backArrow"><img src="./css/images/back-repeated.svg" /></button>
        </div>
        <div class="titleProfileAndStreak">
            <div class="profileAndStreak" @onclick="goToSProfilePage">

                <div class="streakBtn">
                    @if (streakStatTitle != null && streakStatTitle != "")
                    {
                        if (streakImgIcon != "")
                        {
                            <img src=@streakImgIcon style="width:87%;" />
                        }
                    }
                </div>
                <button class="profilePic">@userIcon</button>
            </div>
            <div>
                <div class="pageTitle">תכנית עסקית לחלומות</div>
                <div class="secondTitle">החסכונות שלי</div>
            </div>
        </div>

        <div class="outerSavings">
            <div class="thirdTitle">
                סך החסכונות עד כה:
                <span>@sumSavings ₪</span>
            </div>
        </div>


        <div>
            <button @onclick="()=> isAddSavingOverlayClicked = !isAddSavingOverlayClicked" class="AddNewSaving">
                <div class="emoji-circle">
                    💰
                </div>
                <p class="addTitle">חסכון חדש</p>
            </button>
        </div>



        <div class="outerSavingsLines">
            @foreach (AllUserSavingsToShow saving in allSavings)
            {
                <div @onclick="()=>showSavingDetails(saving)" class="outerSavingsLine">
                    <div class="outerIconTitleAndSum">
                        <div class="outerIconAndTitleToShowFirst">
                            <span class="emoji-circle">
                                💰
                            </span>
                            <span>@saving.savingsTitle</span>
                        </div>
                        <div class="divider"></div>
                        <span>@saving.savingsSum ₪</span>
                    </div>

                </div>
            }
        </div>

        @if (OpenSavingDetails)
        {

            <div class="overlay">
                <div class="outerPopUp">

                    <div class="outerFirstRow">
                        <div>
                            <button @onclick="closeSavingDetailsPopUp" class="backArrow"><img src="./css/images/back-repeated.svg" /></button>
                        </div>


                        <div class="outerDotsAndOptionsTrans">
                            <button class="optionsMenu" @onclick="OpetionsBtnClicked"><img src="./css/images/option menu.svg" /></button>

                            @if (isOpetionsBtnClicked)
                            {
                                <div id="options">

                                    <OptionsMenuComponent editBtnClicked="@showEditSaving" deleteBtnClicked="@deleteSavingBtnClciked" closeOverlay="closeDeleteOverlay"></OptionsMenuComponent>
                                </div>
                            }
                        </div>


                    </div>
                    <div class="outerDivSaving">
                        <div class="outerTitle">
                            <div class="outerIconAndTitleToShow">
                                <span class="emoji-circle">
                                    💰
                                </span>
                                <span><b>@savingDetailsToShow.savingsTitle</b></span>
                            </div>


                            <div class="lineBetween"></div>
                        </div>


                        <div class="outerSaving">
                            <span><b>סכום חסכון</b></span>


                            <span class="outerSavingAmount"><b> @savingDetailsToShow.savingsSum ₪</b></span>


                        </div>
                        @if (savingDetailsToShow.savingLocation != null && savingDetailsToShow.savingLocation.Length > 0)
                        {

                            <div class="outerSaving">
                                <span><b>מקום החסכון</b></span>


                                <span class="outerSavingAmount" style="word-break: break-word;"><b> @savingDetailsToShow.savingLocation</b></span>


                            </div>
                        }
                    </div>

                </div>
            </div>
        }


        @if (isEditSavingClicked)
        {
            <div class="overlay">
                <div class="outerPopUp">

                    <div class="outerFirstRow">


                        <div>
                            <button class="backArrow" @onclick="closeEditAndDeleteOpt"><img src="./css/images/back-repeated.svg" /></button>
                        </div>

                    </div>

                    <div class="innerDiv">
                        <div class="outerTitle">

                            <div class="outerTitleAndCounter">
                                <div class="input-container">
                                    <div> <span><b>עריכת חסכון</b></span></div>
                                    <div class="outerIconAndTitle">

                                        <span class="emoji-circle">
                                            💰
                                        </span>
                                        <span>
                                            <input class="catTitle" type="text" maxlength="18" minlength="2" @oninput="titleLengthCounter" @bind="@editedSaving.savingsTitle" />
                                        </span>

                                        <div class="counter">
                                            @if (editedSaving.savingsTitle == null || editedSaving.savingsTitle == "")
                                            {
                                                <span>0/18</span>
                                            }
                                            else
                                            {
                                                if (editedSaving.savingsTitle.Length < 2 || editedSaving.savingsTitle.Length > 18)
                                                {

                                                    <span>@titleInputLength/18</span>
                                                }
                                                else
                                                {
                                                    <span>@titleInputLength/18</span>

                                                }
                                            }
                                        </div>
                                    </div>

                                </div>
                                <div>
                                    @if (editedSaving.savingsTitle == null || editedSaving.savingsTitle == "")
                                    {
                                        if (emptySavingTitle)
                                        {
                                            <span style="color:#F95050">שם החסכון צריך להיות בין 2-18 תווים</span>
                                        }

                                    }
                                </div>
                            </div>
                            <div class="lineBetween"></div>
                        </div>



                        <div class="outerSavingAndMsg">

                            <div class="outerSaving">
                                <span><b>סכום חסכון</b></span>



                                <div class="outerSavingsAmountAndShekel">
                                    <input class="outerSavingAmountToEdit" type="number" @bind="@editedSaving.savingsSum" @oninput="savingSumCounter" />
                                    <span>₪</span>

                                </div>
                            </div>

                            <div>
                                @if (editedSaving.savingsSum == null || editedSaving.savingsSum == 0)
                                {
                                    if (emptySavingSum)
                                    {
                                        <span style="color:#F95050">לא ניתן לשמור חסכון ללא סכום</span>
                                    }
                                }
                            </div>
                        </div>
                        <div class="outerSaving">
                            <div> <span><b>מקום החסכון</b></span></div>
                            <div style="display: flex;
    justify-content: flex-end;">
                                <div class="counter" style="bottom: 11.7vh;
    z-index: 1;">
                                    @if (saveLocation == null || saveLocation == "")
                                    {
                                        <span>0/45</span>
                                    }
                                    else
                                    {
                                        if (saveLocation.Length < 2 || saveLocation.Length > 18)
                                        {

                                            <span>@locationLength/18</span>
                                        }
                                        else
                                        {
                                            <span>@locationLength/18</span>

                                        }
                                    }
                                </div>
                                <input class="catTitle" type="text" maxlength="18" minlength="2" @bind="@saveLocation" @oninput="savingLocationLengthCounter" />
                            </div>

                        </div>

                    </div>


                    <div>

                        <button class="primery-button" @onclick="saveUpdatedSaving">שמירת שינויים</button>
                    </div>
                </div>
            </div>
        }


        @if (deleteBtnClicked)
        {
            isOpetionsBtnClicked = false;
            <GeneralPopUpComponent popupTypeTitle="מחיקת חסכון" middleText="@popupBodyText" action="מחיקה" makeAction="deleteSaving" closePopUp="closeDeletePopUp"></GeneralPopUpComponent>
        }

    </div>
</div>

@if (isAddSavingOverlayClicked)
{

    <div class="megaOuterLay">
        <div class="outerLay">
            <div class="BgOverlay"> </div>
            <div class="addSavingOverlay">

                <div class="paddingDiv">
                    <div class="outerTitleAndIcon">
                        <button class="closeOverlay" @onclick="closeAddSavingOverlay"><img src="./css/images/close x.svg" /></button>
                        <h3 class="popupTitle">הוספת חסכון</h3>
                        <div class="titleAndIconToAdd">
                            <div class="outerTitleAndCounterToAdd">
                                <div>
                                    <span><b>שם החסכון</b></span>
                                </div>
                                <div class="input-containerToAdd">
                                    <input class="catTitleToAdd" type="text" maxlength="18" minlength="2" @oninput="titleLengthCounter" @bind="newSaving.savingsTitle" />
                                    <div class="counter">
                                        @if (newSaving.savingsTitle == null || newSaving.savingsTitle == "")
                                        {
                                            <span>0/18</span>
                                        }
                                        else
                                        {
                                            if (newSaving.savingsTitle.Length < 2 || newSaving.savingsTitle.Length > 18)
                                            {

                                                <span>@titleInputLength/18</span>
                                            }
                                            else
                                            {
                                                <span>@titleInputLength/18</span>

                                            }
                                        }
                                    </div>

                                </div>
                                <div>
                                    @if (newSaving.savingsTitle == null || newSaving.savingsTitle == "")
                                    {
                                        if (emptySavingTitle)
                                        {
                                            <span style="color:#F95050">שם החסכון צריך להיות בין 2-18 תווים</span>
                                        }

                                    }
                                </div>
                            </div>
                        </div>
                        <div class="outerSavingAndMsgSum">

                            <div class="outerSaving">
                                <span><b>סכום החסכון</b></span>

                                <div class="outerSavingsAmountAndShekel">
                                    <input class="outerSavingAmountToAdd" type="number" @bind="newSaving.savingsSum" @oninput="savingSumCounter" />
                                    <span style="text-align: right;
    width: 1.5rem;
}">₪</span>
                                </div>

                            </div>
                            <div>
                                @if (newSaving.savingsSum == null || newSaving.savingsSum == 0)
                                {
                                    if (emptySavingSum)
                                    {
                                        <span style="color:#F95050">לא ניתן לשמור חסכון ללא סכום</span>
                                    }
                                }
                            </div>

                        </div>

                        <div class="outerSavingToAdd">
                            <div> <span><b>מקום החסכון</b></span></div>
                            <div class="outerSumAndCounter">
                                <span class="outerSavingsAmountAndShekelSum">
                                <input class="outerSavingAmountToAdd" type="text" maxlength="18" minlength="2" @bind="@saveLocation" @oninput="savingLocationLengthCounter" />
                            </span>
                            <div class="savingCounter">
                                @if (saveLocation == null || saveLocation == "")
                                {
                                    <span>0/18</span>
                                }
                                else
                                {
                                    if (saveLocation.Length < 2 || saveLocation.Length > 18)
                                    {

                                        <span>@locationLength/18</span>
                                    }
                                    else
                                    {
                                        <span>@locationLength/18</span>

                                    }
                                }
                            </div>
                            </div>
                            
                        </div>



                    </div>
                </div>
                <div class="outerSaveSaving">

                    @if (newSaving.savingsTitle == null || newSaving.savingsTitle == "" || newSaving.savingsTitle.Length > 18 || newSaving.savingsTitle.Length < 2)
                    {

                        <button class="primery-button" style="opacity:0.6">שמירה וסיום</button>
                    }
                    else if (newSaving.savingsSum == null || newSaving.savingsSum == 0)
                    {
                        <button class="primery-button" style="opacity:0.6">שמירה וסיום</button>
                    }
                    else
                    {
                        <button class="primery-button" @onclick="addNewSaving">שמירה וסיום</button>
                    }

                </div>
            </div>
        </div>
    </div>

}


@code {

    [Parameter]
    public int userID { get; set; }

    [CascadingParameter]
    private UserDTO user { get; set; }

    List<AllUserSavingsToShow> allSavings = new List<AllUserSavingsToShow>();
    SavingToAdd newSaving = new SavingToAdd();
    SavingToEdit editedSaving = new SavingToEdit();
    AllUserSavingsToShow savingDetailsToShow = new AllUserSavingsToShow();
    int sumSavings = 0;
    private int CurrentYear => DateTime.Now.Year;

    bool isAddSavingOverlayClicked = false;
    bool OpenSavingDetails = false;
    bool isOpetionsBtnClicked = false;
    bool isEditSavingClicked = false;
    bool deleteBtnClicked = false;
    bool emptySavingTitle = false;
    bool emptySavingSum = false;

    string titleInput = "";
    string popupBodyText = "";
    int titleInputLength = 0;

    string streakStatTitle = "";
    string streakImgIcon = "";
    string userIcon = "";

    protected override async Task OnInitializedAsync()
    {

        userID = user.Id;

        await Task.Delay(1); // This is just to simulate an async process.

        //int currentMonthNumber = DateTime.Now.Month; // Gets the current month number
        StateHasChanged();

        var getUserIcon = await Http.GetAsync("api/Present/getUserIcon/" + userID);
        if (getUserIcon.IsSuccessStatusCode)
        {
            string iconCheck = await getUserIcon.Content.ReadAsStringAsync();
            userIcon = iconCheck;
        }
        else
        {
            userIcon = "🌟";
            var errorContent = await getUserIcon.Content.ReadAsStringAsync();
            Console.WriteLine("failed to find icon or update it to default because: " + errorContent);
        }

        await getCurrentStreak();

        var userSavingsRes = await Http.GetAsync("api/Future/userFutureSavingsToShow/" + userID);

        if (userSavingsRes.IsSuccessStatusCode)
        {
            allSavings = userSavingsRes.Content.ReadFromJsonAsync<List<AllUserSavingsToShow>>().Result;
            //getCurrentStreak();

        }
        else
        {
            Console.WriteLine("no savings");

        }

        sumSavings = 0;
        @foreach (AllUserSavingsToShow saving in allSavings)
        {
            sumSavings += saving.savingsSum;
        }

    }

    void backToFutureHomePage()
    {
        Nav.NavigateTo("./FutureHomePage");
    }

    public void goToSProfilePage()
    {
        Nav.NavigateTo("./ProfilePage/" + userID);
    }

    public async Task addNewSaving()
    {

        var SavingToAddRes = await Http.PostAsJsonAsync("api/Future/addSaving/" + userID, newSaving);
        if (SavingToAddRes.IsSuccessStatusCode)
        {
            // Use 'await' to asynchronously read the content of the response.
            AllUserSavingsToShow newSavingToAddToList = await SavingToAddRes.Content.ReadFromJsonAsync<AllUserSavingsToShow>();

            allSavings.Add(newSavingToAddToList);
            newSaving = new SavingToAdd();
        }
        else
        {

            Console.WriteLine("Failed to add new saving");
        }

        isAddSavingOverlayClicked = false;
        titleInputLength = 0;
        saveLocation = "";
        locationLength = 0;
        sumSavings = 0;
        @foreach (AllUserSavingsToShow saving in allSavings)
        {
            sumSavings += saving.savingsSum;
        }

    }

    void closeSavingDetailsPopUp()
    {
        OpenSavingDetails = false;

    }

    void showSavingDetails(AllUserSavingsToShow savingFullDetails)
    {
        OpenSavingDetails = true;
        isOpetionsBtnClicked = false;
        saveLocation = "";
        locationLength = 0;
        savingDetailsToShow = savingFullDetails;
    }

    void closeEditAndDeleteOpt()
    {
        isOpetionsBtnClicked = false;
        isEditSavingClicked = !isEditSavingClicked;
    }

    public void OpetionsBtnClicked()
    {
        isOpetionsBtnClicked = !isOpetionsBtnClicked;

    }

    void showEditSaving()
    {
        isEditSavingClicked = true;
        editedSaving.savingsTitle = savingDetailsToShow.savingsTitle;
        titleInput = editedSaving.savingsTitle;
        titleInputLength = editedSaving.savingsTitle.Length;
        editedSaving.savingsSum = savingDetailsToShow.savingsSum;
        editedSaving.id = savingDetailsToShow.id;
        editedSaving.savingLocation = savingDetailsToShow.savingLocation;
        if (savingDetailsToShow.savingLocation != null)
        {
            saveLocation = savingDetailsToShow.savingLocation;
            locationLength = savingDetailsToShow.savingLocation.Length;

        }

    }


    public void closeDeletePopUp()
    {
        deleteBtnClicked = false;
    }

    void deleteSavingBtnClciked()
    {
        deleteBtnClicked = !deleteBtnClicked;
        editedSaving.id = savingDetailsToShow.id;

        popupBodyText = "החסכון '" + savingDetailsToShow.savingsTitle + "' עומד להמחק";
        isOpetionsBtnClicked = false;



    }

    void closeDeleteOverlay()
    {
        OpetionsBtnClicked();
        saveLocation = "";
        locationLength = 0;
    }

    private void titleLengthCounter(ChangeEventArgs e)
    {
        titleInput = e.Value.ToString();
        if (titleInput.Length == 0)
        {
            emptySavingTitle = true;
        }
        else
        {
            emptySavingTitle = false;
        }
        newSaving.savingsTitle = titleInput;
        titleInputLength = titleInput.Length;
    }

    private void savingSumCounter(ChangeEventArgs e)
    {
        string savingSum = e.Value.ToString();
        if (savingSum.Length == 0)
        {
            emptySavingSum = true;
        }
        else
        {
            emptySavingSum = false;
        }

    }

    string saveLocation = "";
    int locationLength = 0;
    private void savingLocationLengthCounter(ChangeEventArgs e)
    {
        saveLocation = e.Value.ToString();
        if (isAddSavingOverlayClicked)
        {
            newSaving.savingLocation = saveLocation;
        }
        else
        {
            editedSaving.savingLocation = saveLocation;
        }

        locationLength = saveLocation.Length;
    }

    public async Task saveUpdatedSaving()
    {


        var updateSavingRes = await Http.PostAsJsonAsync("api/Future/EditSaving/", editedSaving);
        if (updateSavingRes.IsSuccessStatusCode)
        {
            SavingToEdit updatedSaving = await updateSavingRes.Content.ReadFromJsonAsync<SavingToEdit>();
            savingDetailsToShow.savingsTitle = editedSaving.savingsTitle;
            savingDetailsToShow.savingsSum = editedSaving.savingsSum;
            savingDetailsToShow.savingLocation = editedSaving.savingLocation;
            isEditSavingClicked = false;
            OpenSavingDetails = false;
            OpetionsBtnClicked();

            saveLocation = "";
            locationLength = 0;
            sumSavings = 0;
            @foreach (AllUserSavingsToShow saving in allSavings)
            {
                sumSavings += saving.savingsSum;
            }

            //need to refresh the home page

            Console.WriteLine("saving updated");

        }
        else
        {
            Console.WriteLine("failed to update saving");
        }
    }


    public async Task deleteSaving()
    {
        deleteBtnClicked = false;
        OpenSavingDetails = false;

        var deleteRes = await Http.DeleteAsync("api/Future/deleteSaving/" + editedSaving.id);

        if (deleteRes.IsSuccessStatusCode)
        {
            //@foreach (AllUserSavingsToShow saving in allSavings)
            //{
            //    @if (saving.id == editedSaving.id)
            //    {
            //        allSavings.Remove(saving);
            //    }
            //}

            await deleteSavingFromList();
            sumSavings = 0;
            @foreach (AllUserSavingsToShow saving in allSavings)
            {
                sumSavings += saving.savingsSum;
            }


        }
        else
        {
            Console.WriteLine(" בעיה במחיקת חסכון");
        }


    }

    async Task<bool> deleteSavingFromList()
    {
        // Remove the goal from allGoals
        allSavings.RemoveAll(saving => saving.id == editedSaving.id);
        saveLocation = "";
        locationLength = 0;
        return true;
    }

    void closeAddSavingOverlay()
    {
        isAddSavingOverlayClicked = !isAddSavingOverlayClicked;
        titleInputLength = 0;
        newSaving.savingsSum = 0;
        saveLocation = "";
        locationLength = 0;
    }



    private async Task getCurrentStreak()
    {
        var getCurrentStatRes = await Http.GetAsync("api/Present/getUserStreakStatus/" + userID);
        if (getCurrentStatRes.IsSuccessStatusCode)
        {
            streakStatTitle = await getCurrentStatRes.Content.ReadAsStringAsync();
            switch (streakStatTitle) //will fill the related streak image route
            {
                case "מטבע ארד":

                    streakImgIcon = "./css/images/bronzeCoin.svg";

                    break;
                case "מטבע כסף":

                    streakImgIcon = "./css/images/silverCoin.svg";

                    break;
                case "מטבע זהב":

                    streakImgIcon = "./css/images/goldCoin.svg";

                    break;
                case "שטר":

                    streakImgIcon = "./css/images/singleCashNote.svg";

                    break;
                case "שטרות":

                    streakImgIcon = "./css/images/cashNotes.svg";

                    break;
                case "גביע":

                    streakImgIcon = "./css/images/goblet.svg";

                    break;
                case "יהלום":

                    streakImgIcon = "./css/images/diamond.svg";

                    break;
                default:
                    Console.WriteLine("no picture is associated with this streak");
                    streakImgIcon = "";

                    break;
            }
        }
    }
}
