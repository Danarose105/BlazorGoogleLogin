@page "/UserSavingsPage"

@inject HttpClient Http
@inject NavigationManager Nav
@using BlazorGoogleLogin.Shared.Models.future.toShow
@using BlazorGoogleLogin.Shared.Models.future.toAdd
@using BlazorGoogleLogin.Shared.Models.future.toEdit
@using BlazorGoogleLogin.Client.Components
@using Microsoft.AspNetCore.Components.Web
@*@inject DateService DateService*@
@inject IJSRuntime JSRuntime

<div class="megaOuterPage">
    <div class="outerPage">
        <div>
            <button @onclick="backToFutureHomePage" class="backArrow"><img src="../css/images/back-repeated.svg" /></button>
        </div>

        <div class="pageTitle">תכנית עסקית לחלומות</div>
        <div class="secondTitle">החסכונות שלי</div>

        <div class="outerSavings">
            <div class="thirdTitle">
                סך החסכונות עד כה:
                <span>@sumSavings ₪</span>
            </div>
        </div>


        <div>
            <button @onclick="()=> isAddSavingOverlayClicked = !isAddSavingOverlayClicked" class="AddNewSaving">
                <div class="emoji-circle">
                    💰
                </div>
                <p class="addTitle">חסכון חדש</p>
            </button>
        </div>

        

        <div class="outerSavingsLines">
            @foreach (AllUserSavingsToShow saving in allSavings)
            {
                <div @onclick="()=>showSavingDetails(saving)" class="outerSavingsLine">
                    <div class="outerIconTitleAndSum">
                        <div class="outerIconAndTitleToShowFirst">
                            <span class="emoji-circle">
                                💰
                            </span>
                            <span>@saving.savingsTitle</span>
                        </div>
                        <div class="divider"></div>
                        <span>@saving.savingsSum ₪</span>
                    </div>

                </div>
            }
        </div>

        @if (OpenSavingDetails)
        {

            <div class="overlay">
                <div class="outerPopUp">

                    <div class="outerFirstRow">
                        <div>
                            <button @onclick="closeSavingDetailsPopUp" class="backArrow"><img src="../css/images/back-repeated.svg" /></button>
                        </div>


                        <div class="outerDotsAndOptionsTrans">
                            <button class="optionsMenu" @onclick="OpetionsBtnClicked"><img src="./css/images/option menu.svg" /></button>

                            @if (isOpetionsBtnClicked)
                            {
                                <div id="options">

                                    <OptionsMenuComponent editBtnClicked="@showEditSaving" deleteBtnClicked="@deleteSavingBtnClciked" closeOverlay="closeDeleteOverlay"></OptionsMenuComponent>
                                </div>
                            }
                        </div>


                    </div>
                    <div>
                        <div class="outerTitle">
                            <div class="outerIconAndTitleToShow">
                                <span class="emoji-circle">
                                    💰
                                </span>
                                <span><b>@savingDetailsToShow.savingsTitle</b></span>
                            </div>


                            <div class="lineBetween"></div>
                        </div>


                        <div class="outerSaving">
                            <span><b>סכום חסכון</b></span>


                            <span class="outerSavingAmount"><b> @savingDetailsToShow.savingsSum ₪</b></span>


                        </div>
                    </div>

                </div>
            </div>
        }


        @if (isEditSavingClicked)
        {
            <div class="overlay">
                <div class="outerPopUp">

                    <div class="outerFirstRow">


                        <div>
                            <button class="backArrow" @onclick="()=> isEditSavingClicked = !isEditSavingClicked"><img src="../css/images/back-repeated.svg" /></button>
                        </div>

                    </div>

                    <div>
                        <div class="outerTitle">

                            <div class="outerTitleAndCounter">
                            <div class="input-container">
                            <div> <span><b>עריכת חסכון</b></span></div>
                            <div class="outerIconAndTitle">

                                <span class="emoji-circle">
                                    💰
                                </span>
                                <span>
                                    <input class="catTitle" type="text" maxlength="18" minlength="2" @oninput="titleLengthCounter" @bind="@editedSaving.savingsTitle" />
                                </span>

                                    <div class="counter">
                                    @if (editedSaving.savingsTitle == null || editedSaving.savingsTitle == "")
                                    {
                                        <span>0/18</span>
                                    }
                                    else
                                    {
                                        if (editedSaving.savingsTitle.Length < 2 || editedSaving.savingsTitle.Length > 18)
                                        {

                                            <span>@titleInputLength/18</span>
                                        }
                                        else
                                        {
                                            <span>@titleInputLength/18</span>

                                        }
                                    }
                                    </div>
                            </div>
                               
                                

                            </div>
                        </div
                            <div class="lineBetween"></div>
                        </div>



                        <div class="outerSaving">
                            <span><b>סכום חסכון</b></span>


                          
                             <div class="outerSavingsAmountAndShekel">
                                    <input class="outerSavingAmountToEdit" type="number" @bind="@editedSaving.savingsSum" />
                                    <span>₪</span>
                                  
                            </div>
                                

                        </div>
                    </div>

                  
                    <div>      

                         <button class="primery-button" @onclick="saveUpdatedSaving">שמירת שינויים</button>
                    </div>
                </div>
            </div>
}


        @if (deleteBtnClicked)
        {
            isOpetionsBtnClicked = false;
    <GeneralPopUpComponent popupTypeTitle="מחיקת חסכון" middleText="@popupBodyText" action="מחיקה" makeAction="deleteSaving" closePopUp="closeDeletePopUp"></GeneralPopUpComponent>
        }

    </div>
</div>

@if (isAddSavingOverlayClicked)
        {

            <div class="megaOuterLay">
                <div class="outerLay">
                    <div class="BgOverlay"> </div>
                        <div class="addSavingOverlay">

                          <div class="paddingDiv">
                                <div class="outerTitleAndIcon">
                                    <button class="closeOverlay" @onclick="closeAddSavingOverlay"><img src="./css/images/close x.svg" /></button>
                                    <h3 class="popupTitle">הוספת חסכון</h3>
                                <div class="titleAndIconToAdd">
                                    <div class="outerTitleAndCounterToAdd">
                                        <div>
                                            <span><b>שם החסכון</b></span>
                                        </div>
                                        <div class="input-containerToAdd">
                                             <input class="catTitleToAdd" type="text" placeholder="שם החסכון" maxlength="18" minlength="2" @oninput="titleLengthCounter" />
                                            <div class="counter">
                                                @if (newSaving.savingsTitle == null || newSaving.savingsTitle == "")
                                                {
                                                    <span>0/18</span>
                                                }
                                                else
                                                {
                                                    if (newSaving.savingsTitle.Length < 2 || newSaving.savingsTitle.Length > 18)
                                                    {

                                                        <span>@titleInputLength/18</span>
                                                    }
                                                    else
                                                    {
                                                    <span>@titleInputLength/18</span>

                                                    }
                                                }
                                            </div>
                                    
                                        </div>
                                    </div>
                                </div>
                                <div class="outerSavingToAdd">
                                    <span><b>סכום החסכון</b></span>
                                    <div  class="outerSavingsAmountAndShekel">
                                         <input class="outerSavingAmountToAdd" type="number" @bind="newSaving.savingsSum" placeholder="סכום החסכון" />
                                         <span>₪</span>
                                    </div>
                                   
                                </div>

                                
                              
                                 
                            </div>
                         </div>
                           <div class="outerSaveSaving">
                                    <button class="primery-button" @onclick="addNewSaving">שמירה וסיום</button>
                            </div>
                    </div>
                </div>
            </div>



            @*<div>
                <div>הוספת חסכון</div>
                <div>
                    <span>שם החסכון</span>
                    <input type="text" @bind="newSaving.savingsTitle" />
                </div>
                <div>
                    <span>סכום החסכון</span>
                    <input type="number" @bind="newSaving.savingsSum" />
                </div>

                <div>
                    <button @onclick="addNewSaving">שמירה וסיום</button>
                </div>
            </div>
*@
        }


@code {

    [Parameter]
    public int userID { get; set; }

    [CascadingParameter]
    private UserDTO user { get; set; }

    List<AllUserSavingsToShow> allSavings = new List<AllUserSavingsToShow>();
    SavingToAdd newSaving = new SavingToAdd();
    SavingToEdit editedSaving = new SavingToEdit();
    AllUserSavingsToShow savingDetailsToShow = new AllUserSavingsToShow();
    int sumSavings = 0;
    private int CurrentYear => DateTime.Now.Year;

    bool isAddSavingOverlayClicked = false;
    bool OpenSavingDetails = false;
    bool isOpetionsBtnClicked = false;
    bool isEditSavingClicked = false;
    bool deleteBtnClicked = false;

    string titleInput = "";
    string popupBodyText = "";
    int titleInputLength = 0;

    protected override async Task OnInitializedAsync()
    {

        userID = user.Id;

        await Task.Delay(1); // This is just to simulate an async process.

        //int currentMonthNumber = DateTime.Now.Month; // Gets the current month number
        StateHasChanged();

        var userSavingsRes = await Http.GetAsync("api/Future/userFutureSavingsToShow/" + userID);

        if (userSavingsRes.IsSuccessStatusCode)
        {
            allSavings = userSavingsRes.Content.ReadFromJsonAsync<List<AllUserSavingsToShow>>().Result;
            //getCurrentStreak();

        }
        else
        {
            Console.WriteLine("no savings");

        }

        sumSavings = 0;
        @foreach (AllUserSavingsToShow saving in allSavings)
        {
            sumSavings += saving.savingsSum;
        }

    }

    void backToFutureHomePage()
    {
        Nav.NavigateTo("./FutureHomePage");
    }

    public async Task addNewSaving()
    {

        var SavingToAddRes = await Http.PostAsJsonAsync("api/Future/addSaving/" + userID, newSaving);
        if (SavingToAddRes.IsSuccessStatusCode)
        {
            // Use 'await' to asynchronously read the content of the response.
            AllUserSavingsToShow newSavingToAddToList = await SavingToAddRes.Content.ReadFromJsonAsync<AllUserSavingsToShow>();

            allSavings.Add(newSavingToAddToList);
            newSaving = new SavingToAdd();
        }
        else
        {

            Console.WriteLine("Failed to add new saving");
        }

        isAddSavingOverlayClicked = false;
        titleInputLength = 0;

        sumSavings = 0;
        @foreach (AllUserSavingsToShow saving in allSavings)
        {
            sumSavings += saving.savingsSum;
        }

    }

    void closeSavingDetailsPopUp()
    {
        OpenSavingDetails = false;

    }

    void showSavingDetails(AllUserSavingsToShow savingFullDetails)
    {
        OpenSavingDetails = true;
        savingDetailsToShow = savingFullDetails;
    }

    public void OpetionsBtnClicked()
    {
        isOpetionsBtnClicked = !isOpetionsBtnClicked;

    }

    void showEditSaving()
    {
        isEditSavingClicked = true;
        editedSaving.savingsTitle = savingDetailsToShow.savingsTitle;
        editedSaving.savingsSum = savingDetailsToShow.savingsSum;
        editedSaving.id = savingDetailsToShow.id;

    }


    public void closeDeletePopUp()
    {
        deleteBtnClicked = false;
    }

    void deleteSavingBtnClciked()
    {
        deleteBtnClicked = !deleteBtnClicked;
        editedSaving.id = savingDetailsToShow.id;

        popupBodyText = "החסכון '" + savingDetailsToShow.savingsTitle + "' עומד להמחק";
        isOpetionsBtnClicked = false;



    }

    void closeDeleteOverlay()
    {
        OpetionsBtnClicked();

    }

    private void titleLengthCounter(ChangeEventArgs e)
    {
        titleInput = e.Value.ToString();
        newSaving.savingsTitle = titleInput;
        titleInputLength = titleInput.Length;
    }

    public async Task saveUpdatedSaving()
    {


        var updateSavingRes = await Http.PostAsJsonAsync("api/Future/EditSaving/", editedSaving);
        if (updateSavingRes.IsSuccessStatusCode)
        {
            SavingToEdit updatedSaving = await updateSavingRes.Content.ReadFromJsonAsync<SavingToEdit>();
            savingDetailsToShow.savingsTitle = editedSaving.savingsTitle;
            savingDetailsToShow.savingsSum = editedSaving.savingsSum;
            isEditSavingClicked = false;
            OpenSavingDetails = false;
            OpetionsBtnClicked();

            sumSavings = 0;
            @foreach (AllUserSavingsToShow saving in allSavings)
            {
                sumSavings += saving.savingsSum;
            }

            //need to refresh the home page

            Console.WriteLine("saving updated");

        }
        else
        {
            Console.WriteLine("failed to update saving");
        }
    }


    public async Task deleteSaving()
    {
        deleteBtnClicked = false;
        OpenSavingDetails = false;

        var deleteRes = await Http.DeleteAsync("api/Future/deleteSaving/" + editedSaving.id);

        if (deleteRes.IsSuccessStatusCode)
        {
            //@foreach (AllUserSavingsToShow saving in allSavings)
            //{
            //    @if (saving.id == editedSaving.id)
            //    {
            //        allSavings.Remove(saving);
            //    }
            //}

            await deleteSavingFromList();
            sumSavings = 0;
            @foreach (AllUserSavingsToShow saving in allSavings)
            {
                sumSavings += saving.savingsSum;
            }


        }
        else
        {
            Console.WriteLine(" בעיה במחיקת חסכון");
        }


    }

    async Task<bool> deleteSavingFromList()
    {
        // Remove the goal from allGoals
        allSavings.RemoveAll(saving => saving.id == editedSaving.id);

        return true;
    }

    void closeAddSavingOverlay()
    {
        isAddSavingOverlayClicked = !isAddSavingOverlayClicked;
        titleInputLength = 0;
        newSaving.savingsSum = 0;
    }
}
