@page "/UserSavingsPage"

@inject HttpClient Http
@inject NavigationManager Nav
@using BlazorGoogleLogin.Shared.Models.future.toShow
@using BlazorGoogleLogin.Shared.Models.future.toAdd
@using BlazorGoogleLogin.Shared.Models.future.toEdit
@using BlazorGoogleLogin.Client.Components
@using Microsoft.AspNetCore.Components.Web
@*@inject DateService DateService*@
@inject IJSRuntime JSRuntime

<div>
    <button @onclick="backToFutureHomePage"><img src="./css/images/arrow-back.svg" /></button>
</div>

<div>תכנית עסקית לחלומות</div>
<div>החסכונות שלי</div>

<div>
    <div>
       סך החסכונות עד כה:
    </div>
    @foreach (AllUserSavingsToShow saving in allSavings)
    {
        sumSavings += saving.savingsSum;
    }
    <span>@sumSavings</span>
</div>


<div>
    <button @onclick="()=> isAddSavingOverlayClicked = !isAddSavingOverlayClicked">חסכון חדש</button>
</div>

@if (isAddSavingOverlayClicked)
{
    <div>
        <div>הוספת חסכון</div>
        <div>
            <span>שם החסכון</span>
            <input type="text" @bind="newSaving.savingsTitle" />
        </div>
        <div>
            <span>סכום החסכון</span>
            <input type="number" @bind="newSaving.savingsSum" />
        </div>

        <div>
            <button @onclick="addNewSaving">שמירה וסיום</button>
        </div>
    </div>

}

<div>
    @foreach (AllUserSavingsToShow saving in allSavings)
    {
        <div>
            @saving.savingsTitle
            @saving.savingsSum
        </div>
    }
</div>


@code {

    [Parameter]
    public int userID { get; set; }

    [CascadingParameter]
    private UserDTO user { get; set; }

    List<AllUserSavingsToShow> allSavings = new List<AllUserSavingsToShow>();
    SavingToAdd newSaving = new SavingToAdd();
    int sumSavings = 0;
    private int CurrentYear => DateTime.Now.Year;

    bool isAddSavingOverlayClicked = false;

    protected override async Task OnInitializedAsync()
    {

        userID = user.Id;

        await Task.Delay(1); // This is just to simulate an async process.

        //int currentMonthNumber = DateTime.Now.Month; // Gets the current month number
        StateHasChanged();

        var userSavingsRes = await Http.GetAsync("api/Future/userFutureSavingsToShow/" + userID);

        if (userSavingsRes.IsSuccessStatusCode)
        {
            allSavings = userSavingsRes.Content.ReadFromJsonAsync<List<AllUserSavingsToShow>>().Result;
            //getCurrentStreak();

        }
        else
        {
            Console.WriteLine("no savings");

        }

    }

    void backToFutureHomePage()
    {
        Nav.NavigateTo("./FutureHomePage");
    }

    public async Task addNewSaving()
    {
        
        var SavingToAddRes = await Http.PostAsJsonAsync("api/Future/addSaving/" + userID, newSaving);
        if (SavingToAddRes.IsSuccessStatusCode)
        {
            // Use 'await' to asynchronously read the content of the response.
            AllUserSavingsToShow newSavingToAddToList = await SavingToAddRes.Content.ReadFromJsonAsync<AllUserSavingsToShow>();

            allSavings.Add(newSavingToAddToList);
            newSaving= new SavingToAdd();
        }
        else
        {

            Console.WriteLine("Failed to add new saving");
        }

        isAddSavingOverlayClicked = false;
    }

}
