@using BlazorGoogleLogin.Shared.Models.present.toAdd
@using BlazorGoogleLogin.Shared.Models.present.toShow
@using BlazorGoogleLogin.Shared.Models.present.toEdit
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http

<div class="megaOuterLay">
    <div class="outerLay">
        <div class="BgOverlay"> </div>
        <div class="overlay">
            <div class="paddingDiv">
                <div class="outerTitleAndIcon">
                    <button class="closeOverlay" @onclick="openCategoryOverlay"><img src="./css/images/close x.svg" /></button>
                    <h3 class="popupTitle">@popupTitle</h3>
                    <div class="titleAndIcon">
                        <div class="outerTitleAndCounter">
                            <div class="input-container">
                                <input class="catTitle" type="text" placeholder="שם הקטגוריה" maxlength="18" minlength="2" @oninput="titleLengthCounter" @bind="@titleInput" disabled="@disabledEditOfIncomeTitle" />
                                <div class="counter">
                                    @if (titleInput == null || titleInput == "")
                                    {
                                        <span>0/18</span>
                                    }
                                    else
                                    {
                                        if (titleInput.Length < 2 || titleInput.Length > 18)
                                        {

                                            <span>@titleInputLength/18</span>
                                        }
                                        else
                                        {
                                            <span>@titleInputLength/18</span>

                                        }
                                    }
                                </div>
                                @if (disabledEditOfIncomeTitle)
                                {
                                    <span style="font-size: 0.85em;">לא ניתן לשנות את שם קטגוריית ההכנסות.</span>
                                }
                            </div>
                        </div>


                        <div class="keyBoardAndBtn">
                            <div class="emojiBtnAndKeyboard">
                                <div class="outerCancleAndEmoji">
                                    @if (isEmojiExsist)
                                    {
                                        <button @onclick="ToggleKeyboard" id="emoji-trigger" class="hideDefaultEmojiBtn"><img src="./css/images/add emoji (1).svg" /></button>
                                    }
                                    else if (isCancleBtnClicked)
                                    {
                                        <button @onclick="ToggleKeyboard" id="emoji-trigger"><img src="./css/images/add emoji (1).svg" /></button>
                                    }
                                    else
                                    {
                                        <button @onclick="ToggleKeyboard" id="emoji-trigger" class="@hideBtn"><img src="./css/images/add emoji (1).svg" /></button>
                                    }
                                    @if (noEmojiBtn || isEmojiExsist)
                                    {

                                        <div class="outerCancleAndEmoji">
                                            <button @onclick="deleteSelectedEmoji" class="cancleEmoji">ביטול בחירה</button>
                                            <button @onclick="ToggleKeyboard" class="selectedEmoji">
                                                <span class="emoji">@categoryToEdit.icon</span>
                                                <img src="./css/images/plus icon.svg" class="plusIcon" />
                                            </button>
                                        </div>

                                    }
                                </div>


                                <div class="emoji-keyboard @visibilityClass">
                                    <div class="emoji-categories">
                                        @foreach (var category in emojiCategories.Keys)
                                        {
                                            <button class="category-button @(selectedCategory == category ? "active" : "")"
                                                @onclick="() => SelectCategory(category)">
                                                @category
                                            </button>
                                        }
                                    </div>
                                    <div class="emoji-section">
                                        @foreach (var emoji in emojiCategories[selectedCategory])
                                        {
                                            <span @onclick="() => SelectEmoji(emoji)" class="emoji">@emoji</span>
                                        }
                                    </div>
                                </div>
                            </div>


                        </div>
                       
                    </div>
                </div>
                </div>
                

                <div class="outerColorsAndBtn">
                    <div class="outerColors">
                        <div class="colorsContainer">
                            <div class="colorsRow">
                                @foreach (var color in new[] { "#F4B367", "#AEA2F9", "#F467AB", "#F47867", "#6775F4", "#8DE4BF" })
                                {
                                    <div id="@(color)" class="@(selectedClass == color ? "color-selected" : "")">
                                        <input style="opacity:0;" type="radio" name="categoryColors" value="@color"
                                           @onclick="() => UpdateColor(color)" />

                                    </div>
                                }
                            </div>
                            <div class="colorsRow">
                                @foreach (var color in new[] { "#67CAF4", "#FCE884", "#F9D3C2", "#16A78D", "#696969", "#DADADA" })
                                {
                                    <div id="@(color)" class="@(selectedClass == color ? "color-selected" : "")">
                                        <input style="opacity:0;" type="radio" name="categoryColors" value="@color"
                                           @onclick="() => UpdateColor(color)" />

                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="divBtn">
                        @if (popupTitle == "עריכת קטגוריה")
                        {
                            hideBtn = "hideDefaultEmojiBtn";

                            if (ogCatName != "הכנסות" && titleInput == "הכנסות")
                            {
                                <button class="saveBtn" @onclick="saveUpdatedCat" disabled style="opacity:60%">שמירה וסיום</button>
                                <br />
                                <span>לא ניתן לשמור קטגוריה נוספת בשם 'הכנסות'.</span>
                            }
                            else if (titleInput == null || titleInput == "" || titleInput.Length > 18 || titleInput.Length < 2)
                            {
                               
                                if(isTyped)
                                {

                                    <button class="saveBtn" disabled style="opacity:60%">שמירה וסיום</button>
                                    <br />
                                    <span>שם הקטגוריה צריך להיות בין 2-18 תווים.</span>
                                }
                                else
                                {
                                      <button class="saveBtn" disabled style="opacity:60%">שמירה וסיום</button>
                                }
                                
                            }
                            else if(isSameName)
                            {
                                <button class="saveBtn" disabled style="opacity:60%">שמירה וסיום</button>
                                <br />
                                <span>קיימת קטגוריה בעלת אותו שם</span>
                            }
                            else
                            {
                                <button class="saveBtn" @onclick="saveUpdatedCat">שמירה וסיום</button>
                            }

                        }
                        else if (popupTitle == "הוספת קטגוריה")
                        {

                            if (ogCatName != "הכנסות" && titleInput == "הכנסות")
                            {

                                <button class="saveBtn" @onclick="addNewCategory" disabled style="opacity:60%">שמירה וסיום</button>
                                <br />
                                <span>לא ניתן לשמור קטגוריה נוספת בשם 'הכנסות'.</span>
                            }
                            else if (titleInput == null || titleInput == "" || titleInput.Length > 18 || titleInput.Length < 2)
                            {
                               
                                if(isTyped)
                                {
                                     <button class="saveBtn" disabled style="opacity:60%">שמירה וסיום</button>
                                <br />
                                <span>שם הקטגוריה צריך להיות בין 2-18 תווים.</span>
                                }
                                else
                                {
                                    <button class="saveBtn" disabled style="opacity:60%">שמירה וסיום</button>
                                }
                            }
                             else if(isSameName)
                            {
                                <button class="saveBtn" disabled style="opacity:60%">שמירה וסיום</button>
                                <br />
                                <span>קיימת קטגוריה בעלת אותו שם</span>
                            }
                            else
                            {
                                <button class="saveBtn" @onclick="addNewCategory">שמירה וסיום</button>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        </div>
 



@code {

    [CascadingParameter]
    private UserDTO user { get; set; }

    [Parameter]
    public string popupTitle { get; set; }

    [Parameter]
    public int userID { get; set; }

    [Parameter]
    public CategoryToShow categoryToEdit { get; set; } = new CategoryToShow(); // Default initialization

    [Parameter]
    public string icon { get; set; }

    [Parameter]
    public string categoryColor { get; set; }

    [Parameter]
    public bool isEmojiExsist { get; set; }

    [Parameter]
    public EventCallback<bool> isCategoryOverlayOpen { get; set; }

    [Parameter]
    public EventCallback<CategoryToShow> addNewCatToIndex { get; set; }

    [Parameter]
    public EventCallback<bool> closeOverlay { get; set; }

    [Parameter]
    public CategoryToAdd newCategory { get; set; }

    public CategoryToEdit editedCategory = new CategoryToEdit();


    bool disabledEditOfIncomeTitle = false;
    bool isSameName = false;
    string ogCatName = "";
    string ogEmoji = "";

    string titleInput = "";
    int titleInputLength = 0;
    userToShow currentUser;
    List<CategoryToShow> userCategories = new List<CategoryToShow>();


    protected override async Task OnInitializedAsync()
    {
        userID = user.Id;

        ogCatName = categoryToEdit.categroyTitle;
        ogEmoji = categoryToEdit.icon;

        if (ogCatName == "הכנסות")
        {
            disabledEditOfIncomeTitle = true;

        }

        if (categoryToEdit.categroyTitle != "" && categoryToEdit.categroyTitle != null)
        {
            titleInputLength = ogCatName.Length;
            titleInput = categoryToEdit.categroyTitle;
        }

        var userRes = await Http.GetAsync("api/Present/userToShowByDate/" + userID);

        if (userRes.IsSuccessStatusCode)
        {
            currentUser = userRes.Content.ReadFromJsonAsync<userToShow>().Result;
            userCategories = currentUser.categoriesFullList;
            if (categoryColor == null || categoryColor == "" || categoryColor.Length <= 0)
            {
                categoryColor = "#6775F4";
                selectedClass = "#6775F4";
            }
            else
            {
                selectedClass = categoryColor;
            }
        }
    }

    string color1Selected = "#F4B367";
    string selectedClass = "";
    string hideBtn = "";
    bool noEmojiBtn = false;
    bool isCancleBtnClicked = false;
    bool isTyped = false;
    public async Task saveUpdatedCat()
    {
        //editedCategory.categroyTitle = categoryToEdit.categroyTitle;
        editedCategory.categroyTitle = titleInput;
        editedCategory.color = categoryToEdit.color;
        editedCategory.icon = categoryToEdit.icon;
        editedCategory.id = categoryToEdit.id;

        var updateCatRes = await Http.PostAsJsonAsync("api/Present/EditCategory/", editedCategory);
        if (updateCatRes.IsSuccessStatusCode)
        {
            CategoryToEdit updatedCategory = await updateCatRes.Content.ReadFromJsonAsync<CategoryToEdit>();
            categoryToEdit.categroyTitle = updatedCategory.categroyTitle;
            if ((categoryToEdit.icon == null || categoryToEdit.icon == "") && categoryToEdit.categroyTitle != "הכנסות")
            {
                categoryToEdit.icon = "💰";
            }
            else if ((categoryToEdit.icon == null || categoryToEdit.icon == "") && categoryToEdit.categroyTitle == "הכנסות")
            {
                categoryToEdit.icon = "💵";
            }
            else
            {
                categoryToEdit.icon = updatedCategory.icon;
            }

            categoryToEdit.color = updatedCategory.color;
            isCategoryOverlayOpen.InvokeAsync(false);
            closeOverlay.InvokeAsync(true);
            isTyped = false;

            //need to refresh the home page

            Console.WriteLine("category updated");

        }
        else
        {
            Console.WriteLine("failed to update category");
        }
    }

    public async Task addNewCategory()
    {
        //newCategory.categroyTitle = categoryToEdit.categroyTitle;
        newCategory.categroyTitle = titleInput;
        newCategory.color = categoryToEdit.color;
        newCategory.icon = categoryToEdit.icon;
        newCategory.userID = userID;

        if (categoryToEdit.color == "" || categoryToEdit.color == null)
        {
            newCategory.color = "#6775F4";
        }


        var CatToAddRes = await Http.PostAsJsonAsync("api/Present/AddCategory/" + userID, newCategory);
        if (CatToAddRes.IsSuccessStatusCode)
        {
            // Use 'await' to asynchronously read the content of the response.
            CategoryToShow newCat = await CatToAddRes.Content.ReadFromJsonAsync<CategoryToShow>();

            Console.WriteLine("New category added, ID: " + newCat.id);
            addNewCatToIndex.InvokeAsync(newCat);
            isTyped = false;
            isCategoryOverlayOpen.InvokeAsync(false);
            newCategory = new CategoryToAdd();
        }
        else
        {
            // Consider reading the content of the response even if the status code is not successful.
            var errorContent = await CatToAddRes.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to add new category. Error: " + errorContent);
        }
    }

    public void openCategoryOverlay()
    {
        isTyped = false;
        if(categoryToEdit.icon == "" || categoryToEdit.icon == null)
        {
            categoryToEdit.icon = ogEmoji;
        }

        closeOverlay.InvokeAsync(true);

    }



    private void UpdateColor(string color)
    {
        if (selectedClass == color)
        {
            // If the color is already selected, unselect it
            selectedClass = ""; // Reset the selected color
            categoryToEdit.color = ""; // Assuming you want to clear the selected color
        }
        else
        {
            // Otherwise, update to the new selected color
            categoryToEdit.color = color;
            selectedClass = color;
        }
    }



    private bool isVisible = false;
    private string selectedCategory = "כללי";
    private Dictionary<string, List<string>> emojiCategories = new Dictionary<string, List<string>>
    {
        {"כללי", new List<string> {
                "🏠", "🛏️", "🚿", "💡", "📞", "🖥️", "🚗", "🚌", "🛒", "🍲",
                "🏥", "💊", "👕", "🧹", "🧺", "🍼", "🐶", "🧑‍🔧", "📚", "🧾",
                "🕶️", "🌂", "🔑", "📦"
            }},
        {"כיף", new List<string> {
                "🎭", "🎟️", "🎮", "🎨", "📸", "🍽️", "🏋️‍♂️", "🧘", "🎸", "✈️",
                "🏕️", "🛍️", "🍷", "🎁", "🎈", "📖", "🍰", "🌐", "🕹️", "🚤",
                "🚵", "🛀", "🎷", "🎙️"
            }},
        {"פיננסי", new List<string> {
             "💳",
        "🏦", "💰", "🪙", "💸", "💹",
        "📈", "📉", "📊", "💲", "🏧",
        "🧾", "💱", "💲", "💹", "🏦",
        "🖋️", "💎", "📜", "🏧",
        "📅", "🖥️", "🖨️", "🔍"
            }}
    };

    private string visibilityClass => isVisible ? "visible" : "";

    private void ToggleKeyboard()
    {
        isVisible = !isVisible;
    }

    private void SelectCategory(string category)
    {
        selectedCategory = category;
    }

    private void SelectEmoji(string emoji)
    {
        //Console.WriteLine($"Emoji selected: {emoji}"); // Replace this with actual logic
        noEmojiBtn = true;
        isEmojiExsist = true;
        isCancleBtnClicked = false;
        hideBtn = "hideDefaultEmojiBtn";
        categoryToEdit.icon = emoji;
    }

    private void deleteSelectedEmoji()
    {
        isCancleBtnClicked = true;
        noEmojiBtn = false;
        isEmojiExsist = false;
        categoryToEdit.icon = "";
        hideBtn = "";
    }

    private async Task titleLengthCounter(ChangeEventArgs e)
    {
        isTyped = true;

        var CatsListRes = await Http.GetAsync("api/Present/userCategoriesList/" + userID);
        if (CatsListRes.IsSuccessStatusCode)
        {
            userCategories = CatsListRes.Content.ReadFromJsonAsync<List<CategoryToShow>>().Result;
            
        }

        foreach (CategoryToShow userCat in userCategories)
        {
            if(e.Value.ToString() == userCat.categroyTitle)
            {
                isSameName = true;
                break;
            }
            else
            {
                isSameName = false;
            }
       }

        titleInput = e.Value.ToString();
        titleInputLength = titleInput.Length;
    }
}
}
