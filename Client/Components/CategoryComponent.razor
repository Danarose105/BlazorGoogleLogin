@using BlazorGoogleLogin.Shared.Models.present.toShow
@using BlazorGoogleLogin.Shared.Models.present.toAdd
@using BlazorGoogleLogin.Shared.Models.present.toEdit
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http



@if (deleteBtnClicked)
{
    isOpetionsBtnClicked = false;
    <GeneralPopUpComponent popupTypeTitle="מחיקת קטגוריה" middleText="@popupBodyText" name="" action="מחיקה" makeAction=@deleteCategory closePopUp="closeDeletePopUp"></GeneralPopUpComponent>
}
<div>
    <div class="outerEdit">
        @if (editBtnClicked)
        {

            popupTitle = "עריכת קטגוריה";
            isOpetionsBtnClicked = false;
            <EditCategoryComponent categoryToEdit="@Category" isCategoryOverlayOpen="showEditCategory" popupTitle="@popupTitle" closeOverlay="closeEditOverlay" isEmojiExsist=true categoryColor="@Category.color"></EditCategoryComponent>
        }
    </div>

    <div class="outerCategoryWrap">
        <div class="categoryWrap">
            <div id="iconAndCatTitle">
                <span class="emoji-circle">@Category.icon</span>
                <h2 class="CatTitle">@Category.categroyTitle</h2>
            </div>

            @foreach (SubCategoryToShow overDraftsubcategory in subCategories)
            {

                if (overDraftsubcategory.transactionsValue > overDraftsubcategory.monthlyPlannedBudget && categoryTypeIndicator == false)
                {
                    <div class="overdraftBtn">
                        <span>חריגה</span>
                        <img src="./css/images/overdtaft.svg" />
                    </div>
                    break;
                }
            }

            <div class="closedAndOpenMenu" >
             
                    <button class="options" @onclick="OpetionsBtnClicked"><img src="./css/images/option menu.svg" /></button>
                
                @if (isOpetionsBtnClicked)
                {
                    if (!categoryTypeIndicator)
                    {

                        <OptionsMenuComponent editBtnClicked="@showEditCategory" deleteBtnClicked="@deleteCategoryBtnClciked" closeOverlay="closeDeleteOverlay" isCategory="@isOpetionsBtnClicked"></OptionsMenuComponent>
                       
                    }
                    else
                    {
                        <div>
                            <div class="outerOptions">
                                <button class="optionButton editButton" @onclick="showEditCategory">
                                    <img src="./css/images/edit_pencil.svg" class="icon" />
                                    עריכה
                                </button>
                            </div>
                        </div>

                    }

                }
            </div>

        </div>
    </div>
    <div class="accordionAndSubCatsWrap">


        <div class="categoryAccordion" style="background: @categoryColor" @onclick="accordionControl">
            <button class="options">
                <svg width="33" height="12" viewBox="0 0 33 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M1.75 2L16.75 10L30.75 2" stroke="white" stroke-width="3.5" stroke-linecap="round" stroke-linejoin="round" />
                </svg>
            </button>
        </div>

        @if (isAccordionClick)
        {
            <div class="subCatsWrap">
                @if (subCategories.Count < 13)
                {
                    <button class="custom-btn" @onclick="getUserCategories">
                        <div class="btn-content">

                            <div class="textAndLine">
                                <span class="btn-text">תת קטגוריה חדשה</span>
                                <div class="subCatLine">
                                </div>
                            </div>
                            <div class="outerPlusBtn">
                                <div class="btn-icon"><img src="./css/images/addSubPlusIcon.svg" /></div>
                            </div>
                        </div>
                    </button>
                }
                else
                {
                    @*     לשנות את טקסט הכפתור אחרי שנוסיף עיצוב dis*@
                    <button class="custom-btn" @onclick="getUserCategories" disabled style="opacity:60%;">
                        <div class="btn-content">
                            <div class="textAndLine">
                                <span class="btn-text">תת קטגוריה חדשה </span>
                                <div class="subCatLine">
                                </div>
                            </div>
                            <div class="outerPlusBtn">
                                <div class="btn-icon"><img src="./css/images/addSubPlusIcon.svg" /></div>
                            </div>
                        </div>
                    </button>
                }


                @if (subCategories.Count > 0)
                {
                    bool isFirstItem = true;
                    @foreach (SubCategoryToShow subcategory in subCategories)
                    {
                        if (givingSubCat != null && subcategory.id == givingSubCat.id)
                        {
                            subcategory.monthlyPlannedBudget = givingSubCat.monthlyPlannedBudget;
                        }
                        if (subcategory.transactionsValue == null)
                        {
                            subcategory.transactionsValue = 0;
                        }
                        if (subcategory.monthlyPlannedBudget == null)
                        {
                            subcategory.monthlyPlannedBudget = 0;
                        }

                        int subCatIndex= subCategories.IndexOf(subcategory);
                        if (subCatIndex==0)
                        {
                            <div id="@(isFirstItem ? "existingSubCat":"")" class="budget-card @(isFirstItem ? "first" : "")">
                            <SubCategoryComponent subCategoryTitle="@subcategory.subCategoryTitle" totalSpendings="@subcategory.transactionsValue" budget="@subcategory.monthlyPlannedBudget" subCategoryIDToGet="@subcategory.id" userID="@userID" subCatTakenBudget="updateTakenSubCatBudget" refreshSubCats="getSubCategories" updateEditedSubCat="updateEditedSubCat" categoryID="@Category.id" subCatDeleted="deleteSubCat" categoryTitle="@Category.categroyTitle" categoryTypeIndicator="@categoryTypeIndicator" updatedStreakStat="updateStreak" subCatColor="@categoryColor" updateTransactionSum="updatePresentTable" ></SubCategoryComponent>
                        </div>
                        }
                        else
                        {
                            
                        <div id="@(isFirstItem ? "existingSubCat":"")" class="budget-card @(isFirstItem ? "first" : "")">
                            <SubCategoryComponent subCategoryTitle="@subcategory.subCategoryTitle" totalSpendings="@subcategory.transactionsValue" budget="@subcategory.monthlyPlannedBudget" subCategoryIDToGet="@subcategory.id" userID="@userID" subCatTakenBudget="updateTakenSubCatBudget" refreshSubCats="getSubCategories" updateEditedSubCat="updateEditedSubCat" categoryID="@Category.id" subCatDeleted="deleteSubCat" categoryTitle="@Category.categroyTitle" categoryTypeIndicator="@categoryTypeIndicator" updatedStreakStat="updateStreak" subCatColor="@categoryColor" updateTransactionSum="updatePresentTable"  ></SubCategoryComponent>
                        </div>
                        }

                        isFirstItem = false;
                    }


                }
            </div>
        }

    </div>





    @if (isSubCategoryAddOverlayOpen)
    {
        <div class="overlay">

            <div class="outerSubCatOverlay" >
                <div class="innerSubCatOverlay" id="editOrAddSubCatWindow">
                    <button class="modal-close-btn" @onclick="closeAddSubCatOverlay"><img src="./css/images/close x.svg" /></button>
                    <h2>הוספת תת קטגוריה</h2>

                    <div class="editAndAddSubCat">
                        @if (userCategories.Count > 0)
                        {
                            <span>הוספת תת קטגוריה ל</span>
                            <select class="catsDropDown" @bind="selectedCategoryForNewSubCat">
                                @if (!categoryTypeIndicator)
                                {
                                    foreach (AllUserCategories userCategory in userCategories)
                                    {
                                        <option class="catsOptions" value=@userCategory.categroyTitle> @userCategory.categroyTitle</option>
                                    }
                                }
                                else
                                {
                                    <option class="catsOptions" value=@Category.categroyTitle> @Category.categroyTitle</option>
                                }
                            </select>
                        }
                    </div>

                    <div class="outerTitleAndCounter">
                        <div class="input-container">
                            <label class="titleName" for="amount">שם תת קטגוריה</label>
                            <input class="titleBox" type="text" id="amount" placeholder="שם תת הקטגוריה" maxlength="18" minlength="2" @bind="titleInput" @oninput="SubCatTitleLengthCounter" />
                            <div class="counter">
                                <div class="outerTitleName">

                                    @if (titleInputLength > 0)
                                    {

                                        <span>@titleInput.Length/18</span>
                                    }
                                    else
                                    {
                                        <span>0/18</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    @if (!categoryTypeIndicator)
                    {
                        <div id="presentOnboarding4">
                            <label class="titleName" for="description">מה התקציב החודשי שלך עבור @newSubCategory.subCategoryTitle? </label>

                            <div class="outerBudget">
                                <input class="budgetBox" type="number" id="description" @bind="newSubCategory.monthlyPlannedBudget" />
                                <span class="currency-symbol">₪</span>
                                <div class="lineBetween"></div>
                            </div>

                        </div>
                        <div id="importanceExp">
                        <div class="outerImportance">
                            <label class="titleName" for="importance">עדיפות תת הקטגוריה</label>
                            <div class="outerBtns">
                                <div class="importanceBtns">
                                    <input type="radio" id="wants" name="importance" @onchange="@(() => newSubCategory.importance = 0)" />
                                    <label for="wants">רצון</label>
                                    <span class="divider"></span>

                                    <input type="radio" id="needs" name="importance" @onchange="@(() => newSubCategory.importance = 1)" />
                                    <label for="needs">צורך</label>
                                    <span class="divider"></span>

                                    <input type="radio" id="must" name="importance" @onchange="@(() => newSubCategory.importance = 2)" />
                                    <label for="must">חובה</label>
                                </div>
                            </div>
                        </div>

                        <div class="outerExample">
                            <div>
                                <span class="example">לדוגמה:</span>
                                לק - רצון, דלק - צורך, שכ״ד - חובה. העדיפות משפיעה על הטיפים לייעול התקציב.
                            </div>
                        </div>
                        </div>

                        @if (titleInput.Length >= 2 && titleInput.Length < 19 && newSubCategory.monthlyPlannedBudget > 0 && titleInputExists == false)
                        {
                            
                            <div class="outerSaveBtns">
                                @if (!categoryTypeIndicator && newSubCategory.importance >= 0 || !categoryTypeIndicator && newSubCategory.importance < 3)
                                {
                                    if (categoryTypeIndicator)
                                    {
                                        <button class="primery-button" @onclick="addSubCategoryAndTransaction">שמירה ויצירת הכנסה</button>
                                        <button class="secondery-button" @onclick="addSubCategoryAndEnd">שמירה וסיום</button>
                                    }
                                    else
                                    {
                                        <button class="primery-button" @onclick="addSubCategoryAndTransaction">שמירה ויצירת הוצאה</button>
                                        <button class="secondery-button" @onclick="addSubCategoryAndEnd">שמירה וסיום</button>
                                    }

                                }
                                else
                                {
                                   if (categoryTypeIndicator)
                                    {
                                        <button class="primery-button" @onclick="addSubCategoryAndTransaction" disabled>שמירה ויצירת הכנסה</button>
                                        <button class="secondery-button" @onclick="addSubCategoryAndEnd" disabled>שמירה וסיום</button>
                                    }
                                    else
                                    {
                                        <button class="primery-button" @onclick="addSubCategoryAndTransaction" disabled>שמירה ויצירת הוצאה</button>
                                        <button class="secondery-button" @onclick="addSubCategoryAndEnd" disabled>שמירה וסיום</button>
                                    }
                                }
                            </div>

                        }
                        else
                        {
                            <div class="outerSaveBtns">
                                @if (categoryTypeIndicator)
                                {
                                <button class="primery-button" @onclick="addSubCategoryAndTransaction" disabled>שמירה ויצירת הכנסה</button>
                                <button class="secondery-button" @onclick="addSubCategoryAndEnd" disabled>שמירה וסיום</button>
                                }
                                else
                                {
                                <button class="primery-button" @onclick="addSubCategoryAndTransaction" disabled>שמירה ויצירת הוצאה</button>
                                <button class="secondery-button" @onclick="addSubCategoryAndEnd" disabled>שמירה וסיום</button>
                                }
                            </div>

                            @if (titleInput.Length < 2 || titleInput.Length > 18)
                            {
                                if (isTyped)
                                {
                                    <br />
                                    <span>שם תת הקטגוריה צריך להיות בין 2-18 תווים.</span>
                                }

                            }
                            else if (titleInputExists)
                            {
                                <br />
                                <span> שם תת הקטגוריה כבר קיים.</span>
                            }
                            else if (newSubCategory.monthlyPlannedBudget < 0)
                            {
                                <span>תקציב תת קטגוריה צריך להיות גדול מאפס.</span>
                            }
                            else if (newSubCategory.importance < 0 && !categoryTypeIndicator || newSubCategory.importance > 2 && !categoryTypeIndicator)
                            {
                                <span>בחרו עדיפות לתת קטגוריה זו.</span>

                            }


                        }
                    }
                    else
                    {
                        if (titleInputExists == true)
                        {
                            if (categoryTypeIndicator)
                            {
                                <div class="outerSaveBtns">
                                <button class="primery-button" @onclick="addSubCategoryAndTransaction" disabled>שמירה ויצירת הכנסה</button>
                                <button class="secondery-button" @onclick="addSubCategoryAndEnd" disabled>שמירה וסיום</button>
                                <span> שם תת הקטגוריה כבר קיים.</span>
                                </div>
                            }
                            else
                            {
                                <div class="outerSaveBtns">
                                <button class="primery-button" @onclick="addSubCategoryAndTransaction" disabled>שמירה ויצירת הוצאה</button>
                                <button class="secondery-button" @onclick="addSubCategoryAndEnd" disabled>שמירה וסיום</button>
                                <span> שם תת הקטגוריה כבר קיים.</span>
                                </div>
                            }

                        }
                        else
                        {
                            if (titleInput.Length >= 2 && titleInput.Length < 19)
                            {
                                <div class="outerSaveBtns">
                                    <button class="primery-button" @onclick="addSubCategoryAndTransaction">שמירה ויצירת הכנסה</button>
                                    <button class="secondery-button" @onclick="addSubCategoryAndEnd">שמירה וסיום</button>
                                </div>
                            }
                            else
                            {
                                <div class="outerSaveBtns">
                                    <button class="primery-button" @onclick="addSubCategoryAndTransaction" disabled>שמירה ויצירת הוצאה</button>
                                    <button class="secondery-button" @onclick="addSubCategoryAndEnd" disabled>שמירה וסיום</button>
                                    <span>אורך שם תת הקטגוריה לא תקין.</span>
                                </div>
                            }
                        }

                    }

                </div>
            </div>
        </div>
    }

    @if (openTransactionOverlay)
    {
        <AddTransactionComponent subCategoryTitle="@newSubCatTitle" subCategoryIDTOGet="@newSubCatID" isTransactionOverlayOpen="AddTransOverlay" userID="@userID" updatedStreak="updateStreak"></AddTransactionComponent>
    }
</div>

@if (searchedSubCats != null && searchedSubCats.Count > 0)
{
    isAccordionClick = true;
    getSearchedSubCat();
}



@code {

    [Parameter]
    public int userID { get; set; }

    [Parameter]
    public string categoryTitle { get; set; }

    [Parameter]
    public string icon { get; set; }

    [Parameter]
    public string categoryColor { get; set; }



    [Parameter]
    public bool doRefresh { get; set; }

    [Parameter]
    public bool delete { get; set; }


    [Parameter]
    public bool subCatRefreshed { get; set; }

    [Parameter]
    public CategoryToShow Category { get; set; }



    [Parameter]

    public EventCallback isEditClicked { get; set; }

    [Parameter]
    public EventCallback isDeleteClicked { get; set; }

    [Parameter]

    public EventCallback<CategoryToShow> deleteCat { get; set; }

    [Parameter]
    public EventCallback<OverDraftBudgetToEdit> givingSubCatBudget { get; set; }

    [Parameter]
    public EventCallback<bool> isSubCatSearched { get; set; }

    [Parameter]
    public EventCallback<bool> closeOverlay { get; set; }

    [Parameter]
    public EventCallback<bool> closeEdit { get; set; }

    [Parameter]
    public EventCallback<bool> closeDelete { get; set; }

    [Parameter]
    public OverDraftBudgetToEdit givingSubCat { get; set; }

    [Parameter]
    public List<int> searchedSubCats { get; set; }

    [Parameter]
    public bool categoryTypeIndicator { get; set; } //will indicate if this is an expense or income category

    [Parameter]
    public EventCallback<string?> updatedStreakStat { get; set; }

    [Parameter]
    public EventCallback<double?> updateBudget { get; set; }

    [Parameter]
    public EventCallback<double> updateTransSum { get; set; } //updates transaction sums in main status table



    public bool isAccordionClick = false;

    string selectedCategoryForNewSubCat = "";
    string newSubCatTitle = "";
    string msg = "";
    string popupTitle = "מחיקת קטגוריה";
    string popupBodyText = "";


    int newSubCatID = 0;
    //public bool isAccordionClick = false;
    public bool isSubCategoryAddOverlayOpen = false;
    public bool editBtnClicked = false;
    public bool deleteBtnClicked = false;
    bool openTransactionOverlay = false;
    bool isOpetionsBtnClicked = false;
    bool isTyped = false;


    List<SubCategoryToShow> subCategories = new List<SubCategoryToShow>();
    List<AllUserCategories> userCategories = new List<AllUserCategories>();

    SubCategoryToAdd newSubCategory = new SubCategoryToAdd();
    SubCategoryToShow newSubCatToShow = new SubCategoryToShow();
    AllUserCategories userCategory = new AllUserCategories();

    string titleInput = "";
    int titleInputLength = 0;
    bool titleInputExists = false;

    bool openSubCatsOptions = false;
    OverBudgetToShow chosenSubCategory = new OverBudgetToShow();

    List<string> allSubCatTitles = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        if (categoryColor == null || categoryColor == "")
        {
            categoryColor = "#678EF4"; //default color
        }

        var subCatRes = await Http.GetAsync("api/Present/GetAllSubCatsTitles/" + userID);
        if (subCatRes.IsSuccessStatusCode)
        {
            allSubCatTitles = subCatRes.Content.ReadFromJsonAsync<List<string>>().Result;
        }

    }


    public async Task accordionControl()
    {
        isAccordionClick = !isAccordionClick;
        if (isAccordionClick)
        {
            await getSubCategories();
        }
    }


    public async Task getSubCategories()
    {
        subCategories = new List<SubCategoryToShow>();
        isAccordionClick = true;
        if (!categoryTypeIndicator)
        {

            var subCatRes = await Http.GetAsync("api/Present/subCategoryToShow/" + Category.id);
            if (subCatRes.IsSuccessStatusCode)
            {
                subCategories = new List<SubCategoryToShow>();
                subCategories = subCatRes.Content.ReadFromJsonAsync<List<SubCategoryToShow>>().Result;
                subCatRefreshed = false;
            }
            else
            {
                Console.WriteLine("no subcategories found");
            }
        }
        else
        {
            var getIncomeSubCats = await Http.GetAsync("api/Present/getIncomeSubCats/" + Category.id);

            if (getIncomeSubCats.IsSuccessStatusCode)
            {
                subCategories = new List<SubCategoryToShow>();
                subCategories = getIncomeSubCats.Content.ReadFromJsonAsync<List<SubCategoryToShow>>().Result;
            }
            else
            {
                Console.WriteLine("no subcategories found");
            }
        }
    }

    public async Task getUserCategories()
    {
        isSubCategoryAddOverlayOpen = true;
        selectedCategoryForNewSubCat = Category.categroyTitle;


        var getAllUserCategories = await Http.GetAsync("api/Present/GetUserCategories/" + userID);
        if (getAllUserCategories.IsSuccessStatusCode)
        {
            userCategories = getAllUserCategories.Content.ReadFromJsonAsync<List<AllUserCategories>>().Result;
        }
        else
        {
            Console.WriteLine("no Categories found");
        }
    }

    public async Task addSubCategoryAndEnd()
    {
        if (!categoryTypeIndicator)
        {
            foreach (AllUserCategories userCategory in userCategories)
            {
                if (userCategory.categroyTitle == selectedCategoryForNewSubCat)
                {
                    newSubCategory.categoryID = userCategory.id;

                }
            }
        }
        else
        {
            newSubCategory.categoryID = Category.id;
        }

        newSubCategory.subCategoryTitle = titleInput;

        var subCatToAddRes = await Http.PostAsJsonAsync("api/Present/AddSubCategory", newSubCategory);
        if (subCatToAddRes.IsSuccessStatusCode)
        {
            SubCategoryToAdd tempSubCat = await subCatToAddRes.Content.ReadFromJsonAsync<SubCategoryToAdd>();
            newSubCatID = tempSubCat.id;
            newSubCatTitle = tempSubCat.subCategoryTitle;
            newSubCatToShow.id = tempSubCat.id;
            newSubCatToShow.subCategoryTitle = tempSubCat.subCategoryTitle;
            newSubCatToShow.monthlyPlannedBudget = tempSubCat.monthlyPlannedBudget;
            newSubCatToShow.transactionsValue = 0;
            if (newSubCategory.categoryID == Category.id)
            {
                subCategories.Add(newSubCatToShow);
            }
            newSubCatToShow = new SubCategoryToShow();
            // להפעיל מחדש פונקציה שמושכת את האלמנטים בדף הבית
            Console.WriteLine("new sub category added");

            newSubCategory = new SubCategoryToAdd();
            titleInput = "";
            isTyped = false;
            isSubCategoryAddOverlayOpen = false;
        }
        else
        {
            Console.WriteLine("failed to add new sub category");
        }
    }


    public async Task addSubCategoryAndTransaction()
    {
        newSubCatTitle = "";
        newSubCatID = 0;
        if (!categoryTypeIndicator)
        {
            foreach (AllUserCategories userCategory in userCategories)
            {
                if (userCategory.categroyTitle == selectedCategoryForNewSubCat)
                {
                    newSubCategory.categoryID = userCategory.id;

                }
            }
        }
        else
        {
            newSubCategory.categoryID = Category.id;
        }
        newSubCategory.subCategoryTitle = titleInput;

        var subCatToAddRes1 = await Http.PostAsJsonAsync("api/Present/AddSubCategory", newSubCategory);
        if (subCatToAddRes1.IsSuccessStatusCode)
        {
            // Use 'await' to asynchronously read the content of the response.
            SubCategoryToAdd tempSubCat = await subCatToAddRes1.Content.ReadFromJsonAsync<SubCategoryToAdd>();
            newSubCatID = tempSubCat.id;
            newSubCatTitle = tempSubCat.subCategoryTitle;
            newSubCatToShow.id = tempSubCat.id;
            newSubCatToShow.subCategoryTitle = tempSubCat.subCategoryTitle;
            newSubCatToShow.monthlyPlannedBudget = tempSubCat.monthlyPlannedBudget;
            newSubCatToShow.transactionsValue = 0;
            //subCategories.Add(newSubCatToShow);
            if (tempSubCat.categoryID == Category.id)
            {
                subCategories.Add(newSubCatToShow);
            }
            newSubCatToShow = new SubCategoryToShow();


            Console.WriteLine("New sub-category added, ID: " + newSubCatID);

            // Reset the newSubCategory object for a new entry.
            titleInput = "";
            newSubCategory = new SubCategoryToAdd();

            // Close the sub-category add overlay and open the transaction overlay.
            isSubCategoryAddOverlayOpen = false;
            openTransactionOverlay = true;

            // If there's a method to refresh the UI or update elements on the homepage, call it here.
            // await RefreshHomeElementsAsync();
        }
        else
        {
            // Consider reading the content of the response even if the status code is not successful.
            var errorContent = await subCatToAddRes1.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to add new sub-category. Error: " + errorContent);
        }
    }


    public void AddTransOverlay()
    {
        openTransactionOverlay = !openTransactionOverlay;
        isSubCategoryAddOverlayOpen = false;
    }

    public void generateRefresh(bool refresh)
    {
        doRefresh = refresh;
    }

    //get category to edit:
    public void showEditCategory()
    {
        editBtnClicked = !editBtnClicked;
        isOpetionsBtnClicked = false;
        deleteBtnClicked = false;
        closeOverlay.InvokeAsync(true);
        //OpetionsBtnClicked();
    }

    public void OpetionsBtnClicked()
    {
        isOpetionsBtnClicked = !isOpetionsBtnClicked;

    }

    public void deleteCategoryBtnClciked()
    {
        popupBodyText = "הקטגוריה '" + Category.categroyTitle + "' עומדת להמחק";
        deleteBtnClicked = !deleteBtnClicked;
        isOpetionsBtnClicked = false;
        editBtnClicked = false;
        isOpetionsBtnClicked = false;
        OpetionsBtnClicked();

    }

    protected async Task deleteCategory()
    {
        var deleteRes = await Http.DeleteAsync("api/Present/deleteCategory/" + Category.id);
        if (deleteRes.IsSuccessStatusCode)
        {

            deleteCat.InvokeAsync(Category);

            //for (int i=subCategories.Count-1; i>-1; i--)
            //{
            //    sub
            //}
            isAccordionClick = false;
        }
        else
        {
            Console.WriteLine(" בעיה במחיקת קטגוריה");
        }
        deleteBtnClicked = false;
    }

    public async void updateTakenSubCatBudget(List<OverDraftBudgetToEdit> subNewBudget)
    {
        foreach (OverDraftBudgetToEdit budgetToUpdate in subNewBudget)
        {
            foreach (SubCategoryToShow subCatToUpdate in subCategories)
            {
                if (subCatToUpdate.id == budgetToUpdate.id)
                {
                    subCatToUpdate.monthlyPlannedBudget = budgetToUpdate.monthlyPlannedBudget;
                }
            }
        }

        await getSubCategories();
        var updatedGivingSubCatBudget = await Http.GetAsync("api/Transactions/updateGivingSubCat/" + subNewBudget[0].id);
        if (updatedGivingSubCatBudget.IsSuccessStatusCode)
        {
            double newBudget = await updatedGivingSubCatBudget.Content.ReadFromJsonAsync<double>();
            OverDraftBudgetToEdit givingSubCat = new OverDraftBudgetToEdit();
            givingSubCat.id = subNewBudget[0].id;
            givingSubCat.monthlyPlannedBudget = newBudget;
            givingSubCatBudget.InvokeAsync(givingSubCat);
        }

    }

    public void updateEditedSubCat(SubCategoryToEdit editedSubCat)
    {
        foreach (SubCategoryToShow subcategory in subCategories)
        {
            if (editedSubCat.categoryID != Category.id)
            {
                subCategories.Remove(subcategory);
            }
            else if (editedSubCat.id == subcategory.id)
            {
                subcategory.subCategoryTitle = editedSubCat.subCategoryTitle;

                if (!categoryTypeIndicator)
                {
                    double? tempBudget = 0;
                    if (subcategory.monthlyPlannedBudget > editedSubCat.monthlyPlannedBudget)
                    {
                        tempBudget = (subcategory.monthlyPlannedBudget - editedSubCat.monthlyPlannedBudget) * -1;
                    }
                    else if (subcategory.monthlyPlannedBudget < editedSubCat.monthlyPlannedBudget)
                    {
                        tempBudget = (editedSubCat.monthlyPlannedBudget - subcategory.monthlyPlannedBudget);
                    }

                    subcategory.monthlyPlannedBudget = editedSubCat.monthlyPlannedBudget;
                    if (tempBudget != null)
                    {
                        updateBudget.InvokeAsync(tempBudget);
                    }
                }

            }
        }
    }

    public void deleteSubCat(int subCatIDtoRemove)
    {
        foreach (SubCategoryToShow subCat in subCategories)
        {
            if (subCat.id == subCatIDtoRemove)
            {
                subCategories.Remove(subCat);
            }
        }
    }

    public void closeDeletePopUp()
    {
        deleteBtnClicked = !deleteBtnClicked;
    }

    public async Task getSearchedSubCat()
    {
        subCategories = new List<SubCategoryToShow>();
        foreach (int sb in searchedSubCats)
        {
            var subCatRes = await Http.GetAsync("api/Present/GetSubCategory/" + sb);
            if (subCatRes.IsSuccessStatusCode)
            {
                SubCategoryToShow selectedSubCat = await subCatRes.Content.ReadFromJsonAsync<SubCategoryToShow>();


                subCategories.Add(selectedSubCat);

            }
            else
            {
                Console.WriteLine("no subcategories found");
            }
        }

        makeSearchfuncAgain();
        isAccordionClick = true;
        subCatRefreshed = false;

    }

    void makeSearchfuncAgain()
    {
        isSubCatSearched.InvokeAsync(true);

    }

    void closeEditOverlay()
    {
        editBtnClicked = false;
        closeEdit.InvokeAsync(true);
    }

    void closeDeleteOverlay()
    {
        OpetionsBtnClicked();
        closeOverlay.InvokeAsync(true);

    }

    public void updateStreak(string? newStreakStat)
    {
        updatedStreakStat.InvokeAsync(newStreakStat);
    }

    private void SubCatTitleLengthCounter(ChangeEventArgs e)
    {
        isTyped = true;
        titleInput = e.Value.ToString();
        titleInputLength = titleInput.Length;

        if (allSubCatTitles.Contains(titleInput))
        {
            titleInputExists = true;
        }
        else
        {
            titleInputExists = false;
        }
    }
    //--------------------//

    OverBudgetToShow overDraftSubCategory = new OverBudgetToShow();

    private async void updatePresentTable(double transValue)
    {

        updateTransSum.InvokeAsync(transValue);

        //await getSubCategories();
        Console.WriteLine("trans reached cat component");
    }



    void closeAddSubCatOverlay()
    {
        isTyped = false;
        isSubCategoryAddOverlayOpen = !isSubCategoryAddOverlayOpen;
        titleInput = "";
        newSubCategory.monthlyPlannedBudget = null;
        newSubCategory.subCategoryTitle = "";

    }
}